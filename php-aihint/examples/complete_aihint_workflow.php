<?php
require_once __DIR__ . '/../vendor/autoload.php';

use AIHint\AIHint;
use AIHint\Scoring\TrustScoringEngine;

echo "=== Complete AiHint Workflow with Trust Scoring ===\n\n";

// Initialize the trust scoring engine
$scoringEngine = new TrustScoringEngine();

// Configuration
$issuer = 'https://trust.aihint.org';
$publicKeyUrl = 'https://trust.aihint.org/pubkey.pem';
$privateKeyPath = __DIR__ . '/../keys/private_key.pem';
$publicKeyPath = __DIR__ . '/../keys/public_key.pem';

// Create keys directory if it doesn't exist
if (!is_dir(__DIR__ . '/../keys')) {
    mkdir(__DIR__ . '/../keys', 0755, true);
}

// Generate key pair if they don't exist
if (!file_exists($privateKeyPath) || !file_exists($publicKeyPath)) {
    echo "Generating RSA key pair...\n";
    
    $config = [
        "digest_alg" => "sha256",
        "private_key_bits" => 2048,
        "private_key_type" => OPENSSL_KEYTYPE_RSA,
    ];
    
    $res = openssl_pkey_new($config);
    openssl_pkey_export($res, $privateKey);
    $publicKey = openssl_pkey_get_details($res)['key'];
    
    file_put_contents($privateKeyPath, $privateKey);
    file_put_contents($publicKeyPath, $publicKey);
    
    echo "Keys generated and saved to keys/ directory\n\n";
}

// URL to process
$url = 'https://github.com';
echo "Processing: $url\n";
echo str_repeat('-', 50) . "\n";

try {
    // Step 1: Get trust score
    echo "Step 1: Calculating trust score...\n";
    $result = $scoringEngine->scoreWebsite($url);
    echo "✓ Trust score calculated: {$result->finalScore}\n";
    echo "✓ Trust level: {$result->trustLevel->name}\n\n";
    
    // Step 2: Create AiHint data structure
    echo "Step 2: Creating AiHint data structure...\n";
    $aihintData = [
        'version' => '0.1',
        'type' => 'global',
        'target' => $url,
        'issuer' => $issuer,
        'score' => $result->finalScore,
        'method' => 'aihint-scoring-v1', // Use scoring method
        'issued_at' => (new DateTime())->format('c'),
        'expires_at' => (new DateTime('+1 year'))->format('c'),
        'comment' => "Trust score: {$result->finalScore} (Level: {$result->trustLevel->name}) - Generated by PHP AiHint",
        'public_key_url' => $publicKeyUrl
    ];
    
    $aihint = new AIHint($aihintData);
    echo "✓ AiHint object created\n";
    
    // Step 3: Validate AiHint
    echo "Step 3: Validating AiHint...\n";
    $isValid = $aihint->validate();
    echo "✓ AiHint validation: " . ($isValid ? 'PASSED' : 'FAILED') . "\n\n";
    
    // Step 4: Sign the AiHint
    echo "Step 4: Signing AiHint...\n";
    $aihint->sign($privateKeyPath);
    echo "✓ AiHint signed with private key\n\n";
    
    // Step 5: Verify the signature
    echo "Step 5: Verifying signature...\n";
    $signatureValid = $aihint->verify($publicKeyPath);
    echo "✓ Signature verification: " . ($signatureValid ? 'PASSED' : 'FAILED') . "\n\n";
    
    // Step 6: Save the signed AiHint
    echo "Step 6: Saving signed AiHint...\n";
    $filename = 'signed_aihint_' . parse_url($url, PHP_URL_HOST) . '.json';
    $aihint->save($filename);
    echo "✓ Saved to: $filename\n\n";
    
    // Step 7: Display the complete AiHint
    echo "Step 7: Final AiHint JSON:\n";
    echo str_repeat('-', 50) . "\n";
    echo json_encode($aihint->toArray(), JSON_PRETTY_PRINT) . "\n";
    echo str_repeat('-', 50) . "\n\n";
    
    // Step 8: Test loading and verification
    echo "Step 8: Testing load and verification...\n";
    $loadedAiHint = new AIHint();
    $loadedAiHint->load($filename);
    $loadedValid = $loadedAiHint->verify($publicKeyPath);
    echo "✓ Loaded AiHint verification: " . ($loadedValid ? 'PASSED' : 'FAILED') . "\n\n";
    
    // Display scoring details
    echo "Scoring Details:\n";
    echo "  Final Score: {$result->finalScore}\n";
    echo "  Trust Level: {$result->trustLevel->name} ({$result->trustLevel->getDescription()})\n";
    echo "  Security Score: {$result->securityScore}\n";
    echo "  Reputation Score: {$result->reputationScore}\n";
    echo "  Compliance Score: {$result->complianceScore}\n";
    echo "  Confidence: {$result->confidence}\n";
    
    if (!empty($result->warnings)) {
        echo "  Warnings: " . count($result->warnings) . "\n";
    }
    
    if (!empty($result->errors)) {
        echo "  Errors: " . count($result->errors) . "\n";
    }
    
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "\n";
    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
}

echo "\n=== Workflow Complete ===\n";
