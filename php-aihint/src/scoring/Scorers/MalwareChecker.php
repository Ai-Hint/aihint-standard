<?php
namespace AIHint\Scoring\Scorers;

use Exception;

class MalwareChecker extends BaseScorer
{
    private array $apiConfig;

    public function __construct(array $config = [])
    {
        parent::__construct($config);
        $this->apiConfig = [
            'google_safe_browsing' => $config['google_safe_browsing'] ?? ['enabled' => false],
            'virustotal' => $config['virustotal'] ?? ['enabled' => false],
            'phishtank' => $config['phishtank'] ?? ['enabled' => false]
        ];
    }

    public function score(string $url): array
    {
        [$result, $executionTime] = $this->measureExecutionTime(function() use ($url) {
            return $this->checkMalware($url);
        });

        return [
            'score' => $result['score'],
            'details' => $result['details'],
            'execution_time_ms' => $executionTime
        ];
    }

    private function checkMalware(string $url): array
    {
        $checks = [];
        $threatsFound = [];
        $totalScore = 0.0;
        $checksPerformed = 0;

        // Google Safe Browsing check
        if ($this->apiConfig['google_safe_browsing']['enabled']) {
            $googleResult = $this->checkGoogleSafeBrowsing($url);
            $checks[] = $googleResult;
            $totalScore += $googleResult['score'];
            $checksPerformed++;
            
            if (!$googleResult['safe']) {
                $threatsFound[] = 'Google Safe Browsing: ' . $googleResult['threat_type'];
            }
        }

        // VirusTotal check
        if ($this->apiConfig['virustotal']['enabled']) {
            $vtResult = $this->checkVirusTotal($url);
            $checks[] = $vtResult;
            $totalScore += $vtResult['score'];
            $checksPerformed++;
            
            if (!$vtResult['safe']) {
                $threatsFound[] = 'VirusTotal: ' . $vtResult['threat_type'];
            }
        }

        // PhishTank check
        if ($this->apiConfig['phishtank']['enabled']) {
            $ptResult = $this->checkPhishTank($url);
            $checks[] = $ptResult;
            $totalScore += $ptResult['score'];
            $checksPerformed++;
            
            if (!$ptResult['safe']) {
                $threatsFound[] = 'PhishTank: Phishing site detected';
            }
        }

        // Basic pattern analysis
        $patternResult = $this->checkSuspiciousPatterns($url);
        $checks[] = $patternResult;
        $totalScore += $patternResult['score'];
        $checksPerformed++;

        if (!$patternResult['safe']) {
            $threatsFound[] = 'Pattern Analysis: ' . $patternResult['reason'];
        }

        // Domain reputation check (basic)
        $domainResult = $this->checkDomainReputation($url);
        $checks[] = $domainResult;
        $totalScore += $domainResult['score'];
        $checksPerformed++;

        if (!$domainResult['safe']) {
            $threatsFound[] = 'Domain Reputation: ' . $domainResult['reason'];
        }

        $finalScore = $checksPerformed > 0 ? $totalScore / $checksPerformed : 1.0;

        return [
            'score' => $finalScore,
            'details' => [
                'checks' => $checks,
                'threats_found' => $threatsFound,
                'checks_performed' => $checksPerformed,
                'safe' => empty($threatsFound)
            ]
        ];
    }

    private function checkGoogleSafeBrowsing(string $url): array
    {
        try {
            $apiKey = $this->apiConfig['google_safe_browsing']['api_key'] ?? '';
            if (empty($apiKey)) {
                return [
                    'name' => 'Google Safe Browsing',
                    'safe' => true,
                    'score' => 1.0,
                    'message' => 'API key not configured',
                    'threat_type' => null
                ];
            }

            $data = [
                'client' => [
                    'clientId' => 'aihint-php',
                    'clientVersion' => '1.0'
                ],
                'threatInfo' => [
                    'threatTypes' => ['MALWARE', 'SOCIAL_ENGINEERING', 'UNWANTED_SOFTWARE'],
                    'platformTypes' => ['ANY_PLATFORM'],
                    'threatEntryTypes' => ['URL'],
                    'threatEntries' => [
                        ['url' => $url]
                    ]
                ]
            ];

            $context = stream_context_create([
                'http' => [
                    'method' => 'POST',
                    'header' => 'Content-Type: application/json',
                    'content' => json_encode($data),
                    'timeout' => $this->timeout
                ]
            ]);

            $response = file_get_contents(
                "https://safebrowsing.googleapis.com/v4/threatMatches:find?key=$apiKey",
                false,
                $context
            );

            if ($response === false) {
                return [
                    'name' => 'Google Safe Browsing',
                    'safe' => true,
                    'score' => 0.5,
                    'message' => 'API request failed',
                    'threat_type' => null
                ];
            }

            $result = json_decode($response, true);
            
            if (empty($result['matches'])) {
                return [
                    'name' => 'Google Safe Browsing',
                    'safe' => true,
                    'score' => 1.0,
                    'message' => 'No threats detected',
                    'threat_type' => null
                ];
            }

            $threatType = $result['matches'][0]['threatType'] ?? 'Unknown';
            return [
                'name' => 'Google Safe Browsing',
                'safe' => false,
                'score' => 0.0,
                'message' => "Threat detected: $threatType",
                'threat_type' => $threatType
            ];

        } catch (Exception $e) {
            return [
                'name' => 'Google Safe Browsing',
                'safe' => true,
                'score' => 0.5,
                'message' => 'Check failed: ' . $e->getMessage(),
                'threat_type' => null
            ];
        }
    }

    private function checkVirusTotal(string $url): array
    {
        try {
            $apiKey = $this->apiConfig['virustotal']['api_key'] ?? '';
            if (empty($apiKey)) {
                return [
                    'name' => 'VirusTotal',
                    'safe' => true,
                    'score' => 1.0,
                    'message' => 'API key not configured',
                    'threat_type' => null
                ];
            }

            // First, submit URL for analysis
            $submitData = ['url' => $url];
            $context = stream_context_create([
                'http' => [
                    'method' => 'POST',
                    'header' => 'Content-Type: application/x-www-form-urlencoded',
                    'content' => http_build_query($submitData),
                    'timeout' => $this->timeout
                ]
            ]);

            $response = file_get_contents(
                "https://www.virustotal.com/vtapi/v2/url/scan?apikey=$apiKey",
                false,
                $context
            );

            if ($response === false) {
                return [
                    'name' => 'VirusTotal',
                    'safe' => true,
                    'score' => 0.5,
                    'message' => 'API request failed',
                    'threat_type' => null
                ];
            }

            $result = json_decode($response, true);
            
            if (isset($result['positives']) && $result['positives'] > 0) {
                return [
                    'name' => 'VirusTotal',
                    'safe' => false,
                    'score' => 0.0,
                    'message' => "Detected by {$result['positives']} engines",
                    'threat_type' => 'Malware/Phishing'
                ];
            }

            return [
                'name' => 'VirusTotal',
                'safe' => true,
                'score' => 1.0,
                'message' => 'No threats detected',
                'threat_type' => null
            ];

        } catch (Exception $e) {
            return [
                'name' => 'VirusTotal',
                'safe' => true,
                'score' => 0.5,
                'message' => 'Check failed: ' . $e->getMessage(),
                'threat_type' => null
            ];
        }
    }

    private function checkPhishTank(string $url): array
    {
        try {
            $data = ['url' => $url, 'format' => 'json'];
            $context = stream_context_create([
                'http' => [
                    'method' => 'POST',
                    'header' => 'Content-Type: application/x-www-form-urlencoded',
                    'content' => http_build_query($data),
                    'timeout' => $this->timeout
                ]
            ]);

            $response = file_get_contents(
                'https://checkurl.phishtank.com/checkurl/',
                false,
                $context
            );

            if ($response === false) {
                return [
                    'name' => 'PhishTank',
                    'safe' => true,
                    'score' => 0.5,
                    'message' => 'API request failed',
                    'threat_type' => null
                ];
            }

            $result = json_decode($response, true);
            
            if (isset($result['results']['in_database']) && $result['results']['in_database']) {
                return [
                    'name' => 'PhishTank',
                    'safe' => false,
                    'score' => 0.0,
                    'message' => 'Phishing site detected',
                    'threat_type' => 'Phishing'
                ];
            }

            return [
                'name' => 'PhishTank',
                'safe' => true,
                'score' => 1.0,
                'message' => 'No phishing detected',
                'threat_type' => null
            ];

        } catch (Exception $e) {
            return [
                'name' => 'PhishTank',
                'safe' => true,
                'score' => 0.5,
                'message' => 'Check failed: ' . $e->getMessage(),
                'threat_type' => null
            ];
        }
    }

    private function checkSuspiciousPatterns(string $url): array
    {
        $suspiciousPatterns = [
            '/\b(bit\.ly|tinyurl|t\.co|goo\.gl|ow\.ly)\b/i' => 'URL shortener',
            '/\b(phishing|malware|virus|hack|scam)\b/i' => 'Suspicious keywords',
            '/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/' => 'IP address in URL',
            '/[^a-zA-Z0-9.-]/' => 'Suspicious characters',
            '/\b(admin|login|secure|bank|paypal|amazon)\b.*\b(\.tk|\.ml|\.ga|\.cf)\b/i' => 'Suspicious domain combination'
        ];

        foreach ($suspiciousPatterns as $pattern => $reason) {
            if (preg_match($pattern, $url)) {
                return [
                    'name' => 'Pattern Analysis',
                    'safe' => false,
                    'score' => 0.3,
                    'message' => "Suspicious pattern detected: $reason",
                    'reason' => $reason
                ];
            }
        }

        return [
            'name' => 'Pattern Analysis',
            'safe' => true,
            'score' => 1.0,
            'message' => 'No suspicious patterns detected',
            'reason' => null
        ];
    }

    private function checkDomainReputation(string $url): array
    {
        $domain = $this->getDomain($url);
        
        // Basic domain reputation checks
        $suspiciousTlds = ['.tk', '.ml', '.ga', '.cf', '.top', '.click', '.download'];
        $suspiciousKeywords = ['free', 'download', 'crack', 'hack', 'virus', 'malware'];
        
        foreach ($suspiciousTlds as $tld) {
            if (str_ends_with($domain, $tld)) {
                return [
                    'name' => 'Domain Reputation',
                    'safe' => false,
                    'score' => 0.2,
                    'message' => "Suspicious TLD: $tld",
                    'reason' => "Suspicious TLD: $tld"
                ];
            }
        }
        
        foreach ($suspiciousKeywords as $keyword) {
            if (str_contains(strtolower($domain), $keyword)) {
                return [
                    'name' => 'Domain Reputation',
                    'safe' => false,
                    'score' => 0.3,
                    'message' => "Suspicious keyword in domain: $keyword",
                    'reason' => "Suspicious keyword: $keyword"
                ];
            }
        }
        
        return [
            'name' => 'Domain Reputation',
            'safe' => true,
            'score' => 1.0,
            'message' => 'Domain appears legitimate',
            'reason' => null
        ];
    }
}
