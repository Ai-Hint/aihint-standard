{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/`|]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AiHint Standard - Open Standard for Signed Website Metadata","text":"AiHint Standard v1.1.0 <p>       An open standard for signed, verifiable metadata and trust scoring for websites     </p> \ud83d\udd10 CryptographicSignatures \ud83c\udf10 Multi-LanguageSupport \u26a1 CLI Tools \ud83e\udd16 AI TrustScoring"},{"location":"#what-is-aihint","title":"What is AiHint?","text":"<p>AiHint Standard provides a comprehensive solution for website trust and metadata verification. It includes:</p> <ul> <li>Signed, Verifiable Metadata: Add tamper-proof metadata to websites with cryptographic signatures</li> <li>Automated Trust Scoring: Multi-phase trust assessment covering security, reputation, and compliance</li> <li>Cross-Platform Support: Full implementations in Python, PHP, and JavaScript</li> <li>Real-time Analysis: Automated website analysis with external API integration</li> </ul> <p>The metadata can include information about the site's purpose, ownership, security practices, trust scores, and more. The signatures ensure that the metadata hasn't been tampered with and comes from a trusted source.</p>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"\ud83d\ude80 Get Started Choose Your Implementation \u2192 \ud83d\udcda Documentation User Guide Trust Scoring API Reference Technical Details \ud83d\udd27 Implementations Python JavaScript/Node.js PHP"},{"location":"#supported-languages","title":"Supported Languages","text":"<p>AiHint Standard is implemented in multiple programming languages to make it easy to integrate into your existing projects:</p> Language Status Features Python \u2705 Production Ready Core library, CLI, key generation JavaScript/Node.js \u2705 Production Ready Core library, CLI, TypeScript support PHP \u2705 Production Ready Core library, CLI, key generation, remote key fetching"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Multi-language Support: Choose from Python, JavaScript, or PHP</li> <li>AI Trust Scoring: Automated website trust assessment with 9 scoring modules</li> <li>Self-signing: Create and sign your own metadata for development/testing</li> <li>Trusted Issuers: Use official AiHint Issuer service for production</li> <li>CLI Tools: Command-line interfaces for all implementations</li> <li>Key Management: Generate and manage cryptographic keys</li> <li>Validation: Verify metadata integrity and authenticity</li> </ul>"},{"location":"#trust-scoring-system","title":"\ud83c\udd95 Trust Scoring System","text":"<p>The new AI-powered trust scoring system automatically assesses website trustworthiness across three dimensions:</p> \ud83d\udd12 Security <p>SSL/TLS validation, security headers, malware detection</p> \u2b50 Reputation <p>Domain age, historical incidents, third-party reputation</p> \ud83d\udccb Compliance <p>Privacy policies, contact information, legal compliance</p> <p>Quick Example: <pre><code># Score a website automatically\naihint scoring score https://example.com --verbose\n\n# Create AiHint with automated scoring\naihint create-with-score \\\n  --target \"https://example.com\" \\\n  --issuer \"https://trust.aihint.org\" \\\n  --public-key-url \"https://trust.aihint.org/pubkey.pem\" \\\n  --output \"scored_aihint.json\"\n</code></pre></p> <p>Learn more about Trust Scoring \u2192</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Choose your implementation - Select Python, JavaScript, or PHP</li> <li>Quick Start - Get up and running in minutes</li> <li>Key Concepts - Understand the fundamentals</li> </ol>"},{"location":"#open-source-vs-production","title":"Open Source vs Production","text":"**Important**: This repository contains the **open source protocol** for AiHint Standard, which is designed for development, testing, and self-signing. For production use with global trust, you'll need to use the official **AiHint Issuer service** (coming soon).  <ul> <li>Open Source (this repo): Free, self-signing, development/testing</li> <li>AiHint Issuer Service: Production-ready, globally trusted, paid service (separate project)</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! See our Contributing Guide for details.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. </p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to the AiHint Standard project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Trust Scoring System: Comprehensive automated trust assessment for websites</li> <li>3-phase scoring methodology (Security, Reputation, Compliance)</li> <li>9 individual scoring modules with configurable weights</li> <li>Real-time website analysis with external API integration</li> <li>Asynchronous processing for improved performance</li> <li>Confidence scoring and trust level classification</li> <li>Integrated CLI Commands: New <code>create-with-score</code> command for automated AiHint generation</li> <li>Automatic trust scoring with <code>aihint-scoring-v1</code> method identifier</li> <li>Verbose output with detailed scoring breakdown</li> <li>Configuration file support for custom scoring parameters</li> <li>Seamless integration with existing signing and validation pipeline</li> <li>Scoring Modules:</li> <li>SSL/TLS validation and cipher strength analysis</li> <li>Security headers analysis (HSTS, CSP, X-Frame-Options, etc.)</li> <li>Malware and phishing database checks (Google Safe Browsing, VirusTotal, PhishTank)</li> <li>Domain reputation analysis with WHOIS integration</li> <li>Domain age analysis and historical incident tracking</li> <li>Privacy policy detection and compliance analysis</li> <li>Contact information validation and legal compliance indicators</li> <li>Enhanced Documentation: Comprehensive scoring system documentation</li> <li>Detailed API reference for all scoring modules</li> <li>Configuration examples and best practices</li> <li>Integration guides for automated workflows</li> <li>Trust level interpretation framework</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>CLI Interface: Enhanced with new scoring command group</li> <li>Added <code>scoring</code> command group with <code>score</code>, <code>batch</code>, and <code>config</code> subcommands</li> <li>Improved error handling and user feedback for scoring operations</li> <li>Support for multiple output formats (text, table, JSON)</li> <li>Dependencies: Added new packages for scoring functionality</li> <li><code>aiohttp&gt;=3.8.0</code> for asynchronous HTTP requests</li> <li><code>dnspython&gt;=2.3.0</code> for DNS resolution and analysis</li> <li><code>python-whois&gt;=0.8.0</code> for domain information lookup</li> </ul>"},{"location":"changelog/#technical-details","title":"Technical Details","text":"<ul> <li>Scoring Engine: Modular architecture with pluggable scoring modules</li> <li>Trust Levels: 5-tier classification system (Highly Trusted to Very Low Trust)</li> <li>Score Range: 0.0-1.0 with confidence metrics and detailed breakdowns</li> <li>Performance: Asynchronous processing with configurable timeouts</li> <li>Extensibility: Easy addition of new scoring modules and metrics</li> </ul>"},{"location":"changelog/#100-2025-07-13","title":"[1.0.0] - 2025-07-13","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Multi-language implementation support (Python, JavaScript, PHP)</li> <li>CLI tools for all implementations with full feature parity</li> <li>Comprehensive documentation with MkDocs and SEO optimization</li> <li>Cross-language compatibility testing and verification</li> <li>Key management utilities and remote key fetching capabilities</li> <li>Validation and verification tools with enhanced error handling</li> <li>Flag Counter integration for visitor tracking</li> <li>Automated release scripts and tools</li> <li>Comprehensive test suite (10/10 tests passing)</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Restructured documentation for better user experience and navigation</li> <li>Enhanced error handling across all implementations with descriptive messages</li> <li>Improved cryptographic implementations with latest security standards</li> <li>Updated branding from \"AiHint\" to \"AiHint Standard\"</li> <li>Modernized Pydantic v2 compatibility with proper datetime serialization</li> <li>Enhanced FAQ section with clean, readable format</li> <li>Improved homepage with animated hero section and feature highlights</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Deprecated OpenSSL method calls in PHP implementation</li> <li>Dependency conflicts in JavaScript implementation</li> <li>Broken links in documentation and navigation</li> <li>Validation error messages and user feedback</li> <li>Pydantic v2 deprecation warnings with modern serialization</li> <li>Case-sensitive file conflicts in documentation build</li> <li>SEO optimization with meta tags, structured data, and sitemap</li> <li>Cross-platform compatibility issues</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>Updated cryptographic implementations to use latest standards</li> <li>Enhanced key validation and verification procedures</li> <li>Improved error handling to prevent information leakage</li> <li>Secure key storage practices across all implementations</li> </ul>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Updated package names to follow standard conventions (<code>aihint-standard</code>)</li> <li>Restructured API for better consistency across all language implementations</li> <li>Enhanced validation requirements with stricter schema enforcement</li> <li>Modernized Pydantic models with v2 compatibility</li> </ul>"},{"location":"changelog/#migration-guide-from-v020-to-v100","title":"Migration Guide (from v0.2.0 to v1.0.0)","text":""},{"location":"changelog/#python","title":"Python","text":"<pre><code># Old\nfrom aihint import AiHint\n\n# New\nfrom aihint import AiHint, create_hint, verify_hint\n# Enhanced error handling and Pydantic v2 compatibility\n</code></pre>"},{"location":"changelog/#javascript","title":"JavaScript","text":"<pre><code>// Old\nconst { AiHint } = require('aihint');\n\n// New\nconst { createHint, verifyHint } = require('aihint-standard');\n// Improved TypeScript support and cross-language compatibility\n</code></pre>"},{"location":"changelog/#php","title":"PHP","text":"<pre><code>// Old\nuse AiHint\\AiHint;\n\n// New\nuse AiHintStandard\\AiHint;\n// Modern OpenSSL usage and enhanced CLI tools\n</code></pre>"},{"location":"changelog/#deprecation-notices","title":"Deprecation Notices","text":"<ul> <li>Deprecated old package names in favor of standardized naming conventions</li> <li>Deprecated legacy API methods in favor of new consistent interface</li> <li>Removed deprecated Pydantic v1 features in favor of v2 compatibility</li> </ul>"},{"location":"changelog/#010-2024-01-xx","title":"[0.1.0] - 2024-01-XX","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Initial Python implementation with core functionality</li> <li>Basic CLI functionality and interface</li> <li>Core signing and verification algorithms</li> <li>JSON schema validation and error handling</li> <li>Basic documentation structure and examples</li> </ul>"},{"location":"changelog/#security_1","title":"Security","text":"<ul> <li>RSA-2048 key generation and management</li> <li>SHA-256 signature algorithm implementation</li> <li>Secure key storage practices and validation</li> </ul>"},{"location":"changelog/#reference","title":"Reference","text":""},{"location":"changelog/#implementation-history","title":"Implementation History","text":""},{"location":"changelog/#python-implementation","title":"Python Implementation","text":"<ul> <li>v0.1.0: Initial release with core functionality and basic CLI</li> <li>v0.2.0: Added enhanced CLI interface and improved error handling</li> <li>v1.0.0: Production-ready with comprehensive testing and Pydantic v2 compatibility</li> </ul>"},{"location":"changelog/#javascript-implementation","title":"JavaScript Implementation","text":"<ul> <li>v0.1.0: Initial release with Node.js support and basic functionality</li> <li>v0.2.0: Added TypeScript definitions and improved validation</li> <li>v1.0.0: Production-ready with cross-language compatibility and enhanced CLI</li> </ul>"},{"location":"changelog/#php-implementation","title":"PHP Implementation","text":"<ul> <li>v0.1.0: Initial release with basic functionality and key management</li> <li>v0.2.0: Added CLI interface and remote key fetching capabilities</li> <li>v1.0.0: Production-ready with full feature parity and modern OpenSSL usage</li> </ul>"},{"location":"changelog/#security-advisories","title":"Security Advisories","text":""},{"location":"changelog/#2025-07-13","title":"2025-07-13","text":"<ul> <li>Updated cryptographic implementations to use latest OpenSSL standards</li> <li>Enhanced key validation and verification procedures across all implementations</li> <li>Improved error handling to prevent information leakage and enhance security</li> <li>Modernized Pydantic serialization for better security and compatibility</li> </ul>"},{"location":"changelog/#documentation-improvements","title":"Documentation Improvements","text":""},{"location":"changelog/#v100","title":"v1.0.0","text":"<ul> <li>Complete API reference for all three language implementations</li> <li>Comprehensive quick start guides with working examples</li> <li>Enhanced FAQ section with clear, readable format</li> <li>SEO optimization with meta tags, structured data, and sitemap</li> <li>Animated homepage with modern design and user experience</li> <li>Multi-language implementation selection guide</li> </ul>"},{"location":"changelog/#contributors","title":"Contributors","text":"<ul> <li>Core team: Initial implementation and architecture design</li> <li>Community contributors: Documentation improvements and bug fixes</li> <li>Security researchers: Cryptographic review and security enhancements</li> <li>Open source contributors: Cross-language compatibility and testing</li> </ul>"},{"location":"changelog/#acknowledgments","title":"Acknowledgments","text":"<ul> <li>OpenSSL team for cryptographic primitives and security standards</li> <li>Node.js community for JavaScript implementation support and ecosystem</li> <li>Python packaging community for distribution tools and best practices</li> <li>PHP community for Composer and modern packaging support</li> <li>MkDocs Material team for excellent documentation framework</li> <li>Pydantic team for modern Python data validation and serialization</li> </ul> <p>For detailed information about each release, see the GitHub releases page. </p>"},{"location":"api-reference/cli-reference/","title":"CLI Reference","text":"<p>AiHint Standard provides command-line interfaces for all implementations to make it easy to work with AiHint metadata from the terminal.</p>"},{"location":"api-reference/cli-reference/#python-cli","title":"Python CLI","text":""},{"location":"api-reference/cli-reference/#installation","title":"Installation","text":"<pre><code>pip install aihint\n</code></pre>"},{"location":"api-reference/cli-reference/#commands","title":"Commands","text":""},{"location":"api-reference/cli-reference/#generate-keys","title":"Generate Keys","text":"<pre><code>aihint generate-keys --output-dir ./keys\n</code></pre> <p>Options: - <code>--output-dir</code>: Directory to save generated keys (default: current directory)</p>"},{"location":"api-reference/cli-reference/#create-aihint","title":"Create AiHint","text":"<pre><code>aihint create \\\n  --target \"https://example.com\" \\\n  --issuer \"https://example.com\" \\\n  --score 0.85 \\\n  --method \"aihint-core-v1\" \\\n  --private-key \"keys/private_key.pem\" \\\n  --output \"aihint.json\"\n</code></pre> <p>Options: - <code>--target</code>: Target URL for the AiHint - <code>--issuer</code>: Issuer URL - <code>--score</code>: Trust score (0.0-1.0) - <code>--method</code>: Scoring method (default: \"aihint-core-v1\") - <code>--comment</code>: Optional comment - <code>--expires-at</code>: Expiration date (ISO format) - <code>--private-key</code>: Path to private key file - <code>--output</code>: Output file path</p>"},{"location":"api-reference/cli-reference/#verify-aihint","title":"Verify AiHint","text":"<pre><code>aihint verify aihint.json\naihint verify https://example.com/.well-known/aihint.json\n</code></pre> <p>Options: - <code>--public-key</code>: Path to public key file (optional)</p>"},{"location":"api-reference/cli-reference/#validate-aihint","title":"Validate AiHint","text":"<pre><code>aihint validate aihint.json\n</code></pre>"},{"location":"api-reference/cli-reference/#show-info","title":"Show Info","text":"<pre><code>aihint info aihint.json\n</code></pre>"},{"location":"api-reference/cli-reference/#create-with-automated-scoring","title":"Create with Automated Scoring","text":"<pre><code>aihint create-with-score \\\n  --target \"https://example.com\" \\\n  --issuer \"https://trust.aihint.org\" \\\n  --public-key-url \"https://trust.aihint.org/pubkey.pem\" \\\n  --private-key \"keys/private_key.pem\" \\\n  --verbose \\\n  --output \"scored_aihint.json\"\n</code></pre> <p>Options: - <code>--target</code>: Target URL to score and create AiHint for - <code>--issuer</code>: Issuer URL - <code>--public-key-url</code>: Public key URL for verification - <code>--expires-in</code>: Expiration in days (default: 365) - <code>--comment</code>: Optional comment - <code>--output</code>: Output file path - <code>--private-key</code>: Private key file for signing - <code>--version</code>: AIHint version (default: 0.1) - <code>--config</code>: Scoring configuration file path - <code>--verbose</code>: Verbose output with detailed scoring breakdown</p>"},{"location":"api-reference/cli-reference/#trust-scoring-commands","title":"Trust Scoring Commands","text":"<pre><code># Score a single website\naihint scoring score https://example.com\n\n# Score multiple websites\naihint scoring batch --urls https://example.com,https://github.com\n\n# Generate sample configuration\naihint scoring config --output scoring_config.json\n</code></pre> <p>Scoring Options: - <code>--format</code>: Output format (text, table, json) - <code>--config</code>: Configuration file path - <code>--verbose</code>: Detailed output - <code>--timeout</code>: Request timeout in seconds</p>"},{"location":"api-reference/cli-reference/#javascript-cli","title":"JavaScript CLI","text":""},{"location":"api-reference/cli-reference/#installation_1","title":"Installation","text":"<pre><code>npm install aihint-js\n</code></pre>"},{"location":"api-reference/cli-reference/#commands_1","title":"Commands","text":""},{"location":"api-reference/cli-reference/#generate-keys_1","title":"Generate Keys","text":"<pre><code>npx aihint generate-keys --output-dir ./keys\n</code></pre> <p>Options: - <code>--output-dir</code>: Directory to save generated keys (default: current directory)</p>"},{"location":"api-reference/cli-reference/#create-aihint_1","title":"Create AiHint","text":"<pre><code>npx aihint create \\\n  --target \"https://example.com\" \\\n  --issuer \"https://example.com\" \\\n  --score 0.85 \\\n  --method \"aihint-core-v1\" \\\n  --private-key \"keys/private_key.pem\" \\\n  --output \"aihint.json\"\n</code></pre> <p>Options: - <code>--target</code>: Target URL for the AiHint - <code>--issuer</code>: Issuer URL - <code>--score</code>: Trust score (0.0-1.0) - <code>--method</code>: Scoring method (default: \"aihint-core-v1\") - <code>--comment</code>: Optional comment - <code>--expires-at</code>: Expiration date (ISO format) - <code>--private-key</code>: Path to private key file - <code>--output</code>: Output file path</p>"},{"location":"api-reference/cli-reference/#verify-aihint_1","title":"Verify AiHint","text":"<pre><code>npx aihint verify aihint.json\nnpx aihint verify https://example.com/.well-known/aihint.json\n</code></pre> <p>Options: - <code>--public-key</code>: Path to public key file (optional, will fetch from URL if not provided)</p>"},{"location":"api-reference/cli-reference/#validate-aihint_1","title":"Validate AiHint","text":"<pre><code>npx aihint validate aihint.json\n</code></pre>"},{"location":"api-reference/cli-reference/#fetch-from-url","title":"Fetch from URL","text":"<pre><code>npx aihint fetch https://example.com/.well-known/aihint.json\n</code></pre>"},{"location":"api-reference/cli-reference/#show-info_1","title":"Show Info","text":"<pre><code>npx aihint info aihint.json\n</code></pre>"},{"location":"api-reference/cli-reference/#php-cli","title":"PHP CLI","text":""},{"location":"api-reference/cli-reference/#installation_2","title":"Installation","text":"<pre><code>composer require aihint/aihint-php\n</code></pre>"},{"location":"api-reference/cli-reference/#commands_2","title":"Commands","text":""},{"location":"api-reference/cli-reference/#generate-keys_2","title":"Generate Keys","text":"<pre><code>php vendor/bin/aihint generate-keys --output-dir ./keys\n</code></pre> <p>Options: - <code>--output-dir</code>: Directory to save generated keys (default: current directory)</p>"},{"location":"api-reference/cli-reference/#create-aihint_2","title":"Create AiHint","text":"<pre><code>php vendor/bin/aihint create \\\n  --target \"https://example.com\" \\\n  --issuer \"https://example.com\" \\\n  --score 0.85 \\\n  --method \"aihint-core-v1\" \\\n  --private-key \"keys/private_key.pem\" \\\n  --output \"aihint.json\"\n</code></pre> <p>Options: - <code>--target</code>: Target URL for the AiHint - <code>--issuer</code>: Issuer URL - <code>--score</code>: Trust score (0.0-1.0) - <code>--method</code>: Scoring method (default: \"aihint-core-v1\") - <code>--comment</code>: Optional comment - <code>--expires-at</code>: Expiration date (ISO format) - <code>--private-key</code>: Path to private key file - <code>--output</code>: Output file path</p>"},{"location":"api-reference/cli-reference/#verify-aihint_2","title":"Verify AiHint","text":"<pre><code>php vendor/bin/aihint verify aihint.json\nphp vendor/bin/aihint verify https://example.com/.well-known/aihint.json\n</code></pre> <p>Options: - <code>--public-key</code>: Path to public key file (optional, will fetch from URL if not provided)</p>"},{"location":"api-reference/cli-reference/#validate-aihint_2","title":"Validate AiHint","text":"<pre><code>php vendor/bin/aihint validate aihint.json\n</code></pre>"},{"location":"api-reference/cli-reference/#fetch-from-url_1","title":"Fetch from URL","text":"<pre><code>php vendor/bin/aihint fetch https://example.com/.well-known/aihint.json\n</code></pre>"},{"location":"api-reference/cli-reference/#show-info_2","title":"Show Info","text":"<pre><code>php vendor/bin/aihint info aihint.json\n</code></pre>"},{"location":"api-reference/cli-reference/#common-use-cases","title":"Common Use Cases","text":""},{"location":"api-reference/cli-reference/#quick-setup","title":"Quick Setup","text":"<pre><code># Generate keys\naihint generate-keys --output-dir ./keys\n\n# Create and sign AiHint (manual scoring)\naihint create \\\n  --target \"https://mywebsite.com\" \\\n  --issuer \"https://mywebsite.com\" \\\n  --score 0.85 \\\n  --private-key \"keys/private_key.pem\" \\\n  --output \"aihint.json\"\n\n# OR create with automated scoring\naihint create-with-score \\\n  --target \"https://mywebsite.com\" \\\n  --issuer \"https://trust.aihint.org\" \\\n  --public-key-url \"https://trust.aihint.org/pubkey.pem\" \\\n  --private-key \"keys/private_key.pem\" \\\n  --verbose \\\n  --output \"scored_aihint.json\"\n\n# Verify the result\naihint verify aihint.json\n</code></pre>"},{"location":"api-reference/cli-reference/#automated-scoring-workflows","title":"Automated Scoring Workflows","text":"<pre><code># Score a single website\naihint scoring score https://example.com --verbose\n\n# Score multiple websites with batch processing\naihint scoring batch --urls https://example.com,https://github.com,https://stackoverflow.com\n\n# Generate scoring configuration\naihint scoring config --output my_scoring_config.json\n\n# Create AiHint with custom scoring configuration\naihint create-with-score \\\n  --target \"https://example.com\" \\\n  --issuer \"https://trust.aihint.org\" \\\n  --public-key-url \"https://trust.aihint.org/pubkey.pem\" \\\n  --config my_scoring_config.json \\\n  --verbose \\\n  --output \"custom_scored_aihint.json\"\n</code></pre>"},{"location":"api-reference/cli-reference/#batch-processing","title":"Batch Processing","text":"<pre><code># Validate all AiHint files in a directory\nfor file in *.json; do\n  aihint validate \"$file\"\ndone\n\n# Score multiple websites and create AiHints\nfor url in https://example.com https://github.com https://stackoverflow.com; do\n  aihint create-with-score \\\n    --target \"$url\" \\\n    --issuer \"https://trust.aihint.org\" \\\n    --public-key-url \"https://trust.aihint.org/pubkey.pem\" \\\n    --output \"$(basename $url)_aihint.json\"\ndone\n</code></pre>"},{"location":"api-reference/cli-reference/#remote-verification","title":"Remote Verification","text":"<pre><code># Verify AiHint from a remote URL\naihint verify https://example.com/.well-known/aihint.json\n</code></pre>"},{"location":"api-reference/cli-reference/#key-management","title":"Key Management","text":"<pre><code># Generate new keys\naihint generate-keys --output-dir ./new-keys\n\n# Backup existing keys\ncp keys/private_key.pem backup/private_key_$(date +%Y%m%d).pem\ncp keys/public_key.pem backup/public_key_$(date +%Y%m%d).pem\n</code></pre>"},{"location":"api-reference/cli-reference/#environment-variables","title":"Environment Variables","text":"<p>All CLI implementations support the following environment variables:</p> <ul> <li><code>AIHINT_DEFAULT_METHOD</code>: Default scoring method</li> <li><code>AIHINT_DEFAULT_EXPIRY_DAYS</code>: Default expiration period in days</li> <li><code>AIHINT_KEY_DIRECTORY</code>: Default directory for key files</li> <li><code>AIHINT_TIMEOUT</code>: HTTP timeout for remote operations (JavaScript/PHP only)</li> <li><code>AIHINT_CACHE_DIR</code>: Directory for caching remote keys (PHP only)</li> </ul>"},{"location":"api-reference/cli-reference/#see-also","title":"See Also","text":"<ul> <li>Python API - Python implementation details</li> <li>JavaScript API - JavaScript implementation details</li> <li>PHP API - PHP implementation details</li> <li>Implementation Guide - Detailed usage guide </li> </ul>"},{"location":"api-reference/javascript-api/","title":"JavaScript API Reference","text":"<p>The JavaScript/Node.js implementation of AiHint Standard provides a comprehensive library with TypeScript support for creating, signing, and verifying AiHint metadata, including automated trust scoring capabilities.</p> <p>Other implementations: Python | PHP</p>"},{"location":"api-reference/javascript-api/#installation","title":"Installation","text":"<pre><code>npm install aihint-js\n</code></pre>"},{"location":"api-reference/javascript-api/#quick-start","title":"Quick Start","text":"<pre><code>const { AiHint } = require('aihint-js');\n\n// Create and sign AiHint metadata\nconst aihint = new AiHint({\n    target: \"https://example.com\",\n    issuer: \"https://example.com\",\n    score: 0.85,\n    method: \"aihint-core-v1\"\n});\n\naihint.sign(\"private_key.pem\");\naihint.save(\"aihint.json\");\n</code></pre>"},{"location":"api-reference/javascript-api/#trust-scoring","title":"Trust Scoring","text":"<p>The JavaScript implementation includes a modern trust scoring system:</p> <pre><code>const { TrustScoringEngine } = require('aihint-js/scoring');\n\n// Initialize the scoring engine\nconst engine = new TrustScoringEngine();\n\n// Score a website\nconst result = await engine.scoreWebsite(\"https://example.com\");\n\nconsole.log(`Trust Score: ${result.finalScore.toFixed(3)}`);\nconsole.log(`Trust Level: ${result.trustLevel}`);\nconsole.log(`Confidence: ${result.confidence.toFixed(3)}`);\n</code></pre>"},{"location":"api-reference/javascript-api/#cli-usage","title":"CLI Usage","text":"<pre><code># Score a single website\nnpx aihint-scoring score https://example.com\n\n# Score multiple websites\nnpx aihint-scoring batch https://example.com https://github.com\n\n# Build scoring system\nnpm run build:scoring\n</code></pre>"},{"location":"api-reference/javascript-api/#core-classes","title":"Core Classes","text":""},{"location":"api-reference/javascript-api/#aihint","title":"AiHint","text":"<p>The main class for creating and managing AiHint metadata.</p>"},{"location":"api-reference/javascript-api/#constructor","title":"Constructor","text":"<pre><code>new AiHint({\n    target: string,\n    issuer: string,\n    score: number,\n    method?: string,\n    comment?: string,\n    expiresAt?: Date\n})\n</code></pre> <p>Parameters: - <code>target</code> (string): The target URL for this AiHint - <code>issuer</code> (string): The issuer URL - <code>score</code> (number): Trust score between 0.0 and 1.0 - <code>method</code> (string, optional): Scoring method identifier (default: \"aihint-core-v1\") - <code>comment</code> (string, optional): Additional comment - <code>expiresAt</code> (Date, optional): Expiration date</p>"},{"location":"api-reference/javascript-api/#methods","title":"Methods","text":""},{"location":"api-reference/javascript-api/#signprivatekeypath-string-promisevoid","title":"<code>sign(privateKeyPath: string): Promise&lt;void&gt;</code>","text":"<p>Sign the AiHint metadata with a private key.</p>"},{"location":"api-reference/javascript-api/#verifypublickeypath-string-promiseboolean","title":"<code>verify(publicKeyPath?: string): Promise&lt;boolean&gt;</code>","text":"<p>Verify the signature of the AiHint metadata.</p>"},{"location":"api-reference/javascript-api/#savefilepath-string-promisevoid","title":"<code>save(filePath: string): Promise&lt;void&gt;</code>","text":"<p>Save the AiHint metadata to a JSON file.</p>"},{"location":"api-reference/javascript-api/#loadfilepath-string-promisevoid","title":"<code>load(filePath: string): Promise&lt;void&gt;</code>","text":"<p>Load AiHint metadata from a JSON file.</p>"},{"location":"api-reference/javascript-api/#validate-boolean","title":"<code>validate(): boolean</code>","text":"<p>Validate the AiHint metadata structure.</p>"},{"location":"api-reference/javascript-api/#fetchfromurlurl-string-promiseaihint","title":"<code>fetchFromUrl(url: string): Promise&lt;AiHint&gt;</code>","text":"<p>Fetch and load AiHint metadata from a URL.</p>"},{"location":"api-reference/javascript-api/#key-management","title":"Key Management","text":""},{"location":"api-reference/javascript-api/#keymanager","title":"KeyManager","text":"<p>Utility class for generating and managing cryptographic keys.</p> <pre><code>const { KeyManager } = require('aihint-js');\n\n// Generate a new key pair\nconst keyManager = new KeyManager();\nawait keyManager.generateKeys(\"keys/\");\n\n// Load existing keys\nconst privateKey = await keyManager.loadPrivateKey(\"keys/private_key.pem\");\nconst publicKey = await keyManager.loadPublicKey(\"keys/public_key.pem\");\n</code></pre>"},{"location":"api-reference/javascript-api/#cli-usage_1","title":"CLI Usage","text":"<p>The JavaScript implementation includes a command-line interface:</p> <pre><code># Generate keys\nnpx aihint generate-keys --output-dir ./keys\n\n# Create and sign AiHint\nnpx aihint create \\\n  --target \"https://example.com\" \\\n  --issuer \"https://example.com\" \\\n  --score 0.85 \\\n  --private-key \"keys/private_key.pem\" \\\n  --output \"aihint.json\"\n\n# Verify AiHint\nnpx aihint verify aihint.json\n\n# Validate AiHint\nnpx aihint validate aihint.json\n\n# Fetch from URL\nnpx aihint fetch https://example.com/.well-known/aihint.json\n</code></pre>"},{"location":"api-reference/javascript-api/#typescript-support","title":"TypeScript Support","text":"<p>The library includes full TypeScript support:</p> <pre><code>import { AiHint, AiHintOptions } from 'aihint-js';\n\ninterface CustomAiHintOptions extends AiHintOptions {\n    customField?: string;\n}\n\nconst options: CustomAiHintOptions = {\n  target: \"https://example.com\",\n    issuer: \"https://example.com\",\n    score: 0.85,\n    customField: \"custom value\"\n};\n\nconst aihint = new AiHint(options);\n</code></pre>"},{"location":"api-reference/javascript-api/#examples","title":"Examples","text":""},{"location":"api-reference/javascript-api/#basic-usage","title":"Basic Usage","text":"<pre><code>const { AiHint } = require('aihint-js');\n\nasync function createAiHint() {\n    const aihint = new AiHint({\n        target: \"https://mywebsite.com\",\n        issuer: \"https://mywebsite.com\",\n        score: 0.92,\n        method: \"aihint-core-v1\",\n        comment: \"My website trust metadata\"\n    });\n\n    await aihint.sign(\"private_key.pem\");\n    await aihint.save(\"aihint.json\");\n}\n\ncreateAiHint().catch(console.error);\n</code></pre>"},{"location":"api-reference/javascript-api/#verification","title":"Verification","text":"<pre><code>const { AiHint } = require('aihint-js');\n\nasync function verifyAiHint() {\n    const aihint = new AiHint();\n    await aihint.load(\"aihint.json\");\n\n    const isValid = await aihint.verify(\"public_key.pem\");\n\n    if (isValid) {\n        console.log(\"Signature is valid!\");\n        console.log(`Trust score: ${aihint.score}`);\n    } else {\n        console.log(\"Signature verification failed!\");\n    }\n}\n\nverifyAiHint().catch(console.error);\n</code></pre>"},{"location":"api-reference/javascript-api/#remote-key-fetching","title":"Remote Key Fetching","text":"<pre><code>const { AiHint } = require('aihint-js');\n\nasync function verifyWithRemoteKey() {\n    const aihint = new AiHint();\n    await aihint.load(\"aihint.json\");\n\n    // The library will automatically fetch the public key from the URL\n    const isValid = await aihint.verify();\n\n    console.log(isValid ? \"Valid!\" : \"Invalid!\");\n}\n\nverifyWithRemoteKey().catch(console.error);\n</code></pre>"},{"location":"api-reference/javascript-api/#batch-processing","title":"Batch Processing","text":"<pre><code>const { AiHint } = require('aihint-js');\nconst fs = require('fs').promises;\nconst path = require('path');\n\nasync function processDirectory(directory) {\n    const files = await fs.readdir(directory);\n\n    for (const filename of files) {\n        if (filename.endsWith('.json')) {\n            const filepath = path.join(directory, filename);\n            const aihint = new AiHint();\n\n            try {\n                await aihint.load(filepath);\n                const isValid = aihint.validate();\n                console.log(`${filename}: ${isValid ? 'Valid' : 'Invalid'}`);\n            } catch (error) {\n                console.log(`${filename}: Error - ${error.message}`);\n            }\n        }\n    }\n}\n\nprocessDirectory('./aihint-files/').catch(console.error);\n</code></pre>"},{"location":"api-reference/javascript-api/#error-handling","title":"Error Handling","text":"<pre><code>const { AiHint, AiHintError } = require('aihint-js');\n\nasync function handleErrors() {\n    try {\n        const aihint = new AiHint();\n        await aihint.load(\"aihint.json\");\n        await aihint.verify(\"public_key.pem\");\n    } catch (error) {\n        if (error instanceof AiHintError) {\n            console.log(`AiHint error: ${error.message}`);\n        } else {\n            console.log(`Unexpected error: ${error.message}`);\n        }\n    }\n}\n\nhandleErrors();\n</code></pre>"},{"location":"api-reference/javascript-api/#configuration","title":"Configuration","text":"<p>The JavaScript implementation supports configuration through environment variables:</p> <ul> <li><code>AIHINT_DEFAULT_METHOD</code>: Default scoring method</li> <li><code>AIHINT_DEFAULT_EXPIRY_DAYS</code>: Default expiration period in days</li> <li><code>AIHINT_KEY_DIRECTORY</code>: Default directory for key files</li> <li><code>AIHINT_TIMEOUT</code>: HTTP timeout for remote key fetching (default: 5000ms)</li> </ul>"},{"location":"api-reference/javascript-api/#advanced-features","title":"Advanced Features","text":""},{"location":"api-reference/javascript-api/#enhanced-schema-validation","title":"Enhanced Schema Validation","text":"<p>The JavaScript implementation includes enhanced schema validation with detailed error messages:</p> <pre><code>const { AiHint, ValidationError } = require('aihint-js');\n\ntry {\n    const aihint = new AiHint({\n        target: \"https://example.com\",\n        issuer: \"https://example.com\",\n        score: 1.5  // Invalid: score &gt; 1.0\n    });\n} catch (error) {\n    if (error instanceof ValidationError) {\n        console.log(`Validation error: ${error.message}`);\n        console.log(`Field: ${error.field}`);\n        console.log(`Value: ${error.value}`);\n    }\n}\n</code></pre>"},{"location":"api-reference/javascript-api/#remote-key-fetching_1","title":"Remote Key Fetching","text":"<p>Automatically fetch public keys from URLs:</p> <pre><code>const { AiHint } = require('aihint-js');\n\nasync function verifyWithRemoteKey() {\n    const aihint = new AiHint();\n    await aihint.load(\"aihint.json\");\n\n    // The public key URL is stored in the AiHint metadata\n    // The library will automatically fetch it for verification\n    const isValid = await aihint.verify();\n\n    console.log(isValid ? \"Valid!\" : \"Invalid!\");\n}\n</code></pre>"},{"location":"api-reference/javascript-api/#see-also","title":"See Also","text":"<ul> <li>Python API - Python implementation</li> <li>PHP API - PHP implementation</li> <li>CLI Reference - Command-line interface</li> <li>Implementation Guide - Detailed usage guide </li> </ul>"},{"location":"api-reference/php-api/","title":"PHP API Reference","text":"<p>The PHP implementation of AiHint Standard provides a comprehensive library with CLI support, key generation, and remote key fetching for creating, signing, and verifying AiHint metadata in PHP applications, including automated trust scoring capabilities.</p> <p>Other implementations: Python | JavaScript</p>"},{"location":"api-reference/php-api/#installation","title":"Installation","text":"<pre><code>composer require aihint/aihint-php\n</code></pre>"},{"location":"api-reference/php-api/#quick-start","title":"Quick Start","text":"<pre><code>&lt;?php\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\AiHint;\n\n// Create and sign AiHint metadata\n$aihint = new AiHint([\n    'target' =&gt; 'https://example.com',\n    'issuer' =&gt; 'https://example.com',\n    'score' =&gt; 0.85,\n    'method' =&gt; 'aihint-core-v1'\n]);\n\n$aihint-&gt;sign('private_key.pem');\n$aihint-&gt;save('aihint.json');\n?&gt;\n</code></pre>"},{"location":"api-reference/php-api/#trust-scoring","title":"Trust Scoring","text":"<p>The PHP implementation includes a production-ready trust scoring system:</p> <pre><code>&lt;?php\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\Scoring\\TrustScoringEngine;\n\n// Initialize the scoring engine\n$engine = new TrustScoringEngine();\n\n// Score a website\n$result = $engine-&gt;scoreWebsite(\"https://example.com\");\n\necho \"Trust Score: \" . number_format($result-&gt;getFinalScore(), 3) . \"\\n\";\necho \"Trust Level: \" . $result-&gt;getTrustLevel()-&gt;getDescription() . \"\\n\";\necho \"Confidence: \" . number_format($result-&gt;getConfidence(), 3) . \"\\n\";\n?&gt;\n</code></pre>"},{"location":"api-reference/php-api/#cli-usage","title":"CLI Usage","text":"<pre><code># Score a single website\nphp bin/aihint-scoring score https://example.com\n\n# Score multiple websites\nphp bin/aihint-scoring batch https://example.com https://github.com\n\n# Score with verbose output\nphp bin/aihint-scoring score https://example.com --verbose\n</code></pre>"},{"location":"api-reference/php-api/#core-classes","title":"Core Classes","text":""},{"location":"api-reference/php-api/#aihint","title":"AiHint","text":"<p>The main class for creating and managing AiHint metadata.</p>"},{"location":"api-reference/php-api/#constructor","title":"Constructor","text":"<pre><code>new AiHint([\n    'target' =&gt; string,\n    'issuer' =&gt; string,\n    'score' =&gt; float,\n    'method' =&gt; string,\n    'comment' =&gt; string,\n    'expiresAt' =&gt; DateTime\n])\n</code></pre> <p>Parameters: - <code>target</code> (string): The target URL for this AiHint - <code>issuer</code> (string): The issuer URL - <code>score</code> (float): Trust score between 0.0 and 1.0 - <code>method</code> (string, optional): Scoring method identifier (default: \"aihint-core-v1\") - <code>comment</code> (string, optional): Additional comment - <code>expiresAt</code> (DateTime, optional): Expiration date</p>"},{"location":"api-reference/php-api/#methods","title":"Methods","text":""},{"location":"api-reference/php-api/#signstring-privatekeypath-void","title":"<code>sign(string $privateKeyPath): void</code>","text":"<p>Sign the AiHint metadata with a private key.</p>"},{"location":"api-reference/php-api/#verifystring-publickeypath-null-bool","title":"<code>verify(string $publicKeyPath = null): bool</code>","text":"<p>Verify the signature of the AiHint metadata. If no public key is provided, it will attempt to fetch from the <code>public_key_url</code> in the metadata.</p>"},{"location":"api-reference/php-api/#savestring-filepath-void","title":"<code>save(string $filePath): void</code>","text":"<p>Save the AiHint metadata to a JSON file.</p>"},{"location":"api-reference/php-api/#loadstring-filepath-void","title":"<code>load(string $filePath): void</code>","text":"<p>Load AiHint metadata from a JSON file.</p>"},{"location":"api-reference/php-api/#validate-bool","title":"<code>validate(): bool</code>","text":"<p>Validate the AiHint metadata structure.</p>"},{"location":"api-reference/php-api/#static-fromurlstring-url-aihint","title":"<code>static fromUrl(string $url): AiHint</code>","text":"<p>Fetch and load AiHint metadata from a URL.</p>"},{"location":"api-reference/php-api/#key-management","title":"Key Management","text":""},{"location":"api-reference/php-api/#keymanager","title":"KeyManager","text":"<p>Utility class for generating and managing cryptographic keys.</p> <pre><code>&lt;?php\nuse AiHint\\KeyManager;\n\n// Generate a new key pair\n$keyManager = new KeyManager();\n$keyManager-&gt;generateKeys('keys/');\n\n// Load existing keys\n$privateKey = $keyManager-&gt;loadPrivateKey('keys/private_key.pem');\n$publicKey = $keyManager-&gt;loadPublicKey('keys/public_key.pem');\n\n// Fetch remote public key\n$remoteKey = $keyManager-&gt;fetchRemoteKey('https://example.com/pubkey.pem');\n?&gt;\n</code></pre>"},{"location":"api-reference/php-api/#cli-usage_1","title":"CLI Usage","text":"<p>The PHP implementation includes a command-line interface:</p> <pre><code># Generate keys\nphp vendor/bin/aihint generate-keys --output-dir ./keys\n\n# Create and sign AiHint\nphp vendor/bin/aihint create \\\n  --target \"https://example.com\" \\\n  --issuer \"https://example.com\" \\\n  --score 0.85 \\\n  --private-key \"keys/private_key.pem\" \\\n  --output \"aihint.json\"\n\n# Verify AiHint\nphp vendor/bin/aihint verify aihint.json\n\n# Validate AiHint\nphp vendor/bin/aihint validate aihint.json\n\n# Fetch from URL\nphp vendor/bin/aihint fetch https://example.com/.well-known/aihint.json\n</code></pre>"},{"location":"api-reference/php-api/#examples","title":"Examples","text":""},{"location":"api-reference/php-api/#basic-usage","title":"Basic Usage","text":"<pre><code>&lt;?php\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\AiHint;\n\n// Create AiHint with expiration\n$expiresAt = new DateTime('+1 year');\n$aihint = new AiHint([\n    'target' =&gt; 'https://mywebsite.com',\n    'issuer' =&gt; 'https://mywebsite.com',\n    'score' =&gt; 0.92,\n    'method' =&gt; 'aihint-core-v1',\n    'comment' =&gt; 'My website trust metadata',\n    'expiresAt' =&gt; $expiresAt\n]);\n\n// Sign and save\n$aihint-&gt;sign('private_key.pem');\n$aihint-&gt;save('aihint.json');\n?&gt;\n</code></pre>"},{"location":"api-reference/php-api/#verification-with-remote-key-fetching","title":"Verification with Remote Key Fetching","text":"<pre><code>&lt;?php\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\AiHint;\n\n// Load and verify with automatic remote key fetching\n$aihint = new AiHint();\n$aihint-&gt;load('aihint.json');\n\n// The library will automatically fetch the public key from the URL\nif ($aihint-&gt;verify()) {\n    echo \"Signature is valid!\\n\";\n    echo \"Trust score: \" . $aihint-&gt;score . \"\\n\";\n} else {\n    echo \"Signature verification failed!\\n\";\n}\n?&gt;\n</code></pre>"},{"location":"api-reference/php-api/#loading-from-url","title":"Loading from URL","text":"<pre><code>&lt;?php\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\AiHint;\n\ntry {\n    // Fetch AiHint from a URL\n    $aihint = AiHint::fromUrl('https://example.com/.well-known/aihint.json');\n\n    if ($aihint-&gt;validate()) {\n        echo \"AiHint is valid!\\n\";\n        echo \"Target: \" . $aihint-&gt;target . \"\\n\";\n        echo \"Score: \" . $aihint-&gt;score . \"\\n\";\n    } else {\n        echo \"AiHint validation failed!\\n\";\n    }\n} catch (Exception $e) {\n    echo \"Error: \" . $e-&gt;getMessage() . \"\\n\";\n}\n?&gt;\n</code></pre>"},{"location":"api-reference/php-api/#batch-processing","title":"Batch Processing","text":"<pre><code>&lt;?php\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\AiHint;\n\nfunction processDirectory($directory) {\n    $files = glob($directory . '/*.json');\n\n    foreach ($files as $filepath) {\n        $filename = basename($filepath);\n        $aihint = new AiHint();\n\n        try {\n            $aihint-&gt;load($filepath);\n            $isValid = $aihint-&gt;validate();\n            echo \"$filename: \" . ($isValid ? 'Valid' : 'Invalid') . \"\\n\";\n        } catch (Exception $e) {\n            echo \"$filename: Error - \" . $e-&gt;getMessage() . \"\\n\";\n        }\n    }\n}\n\nprocessDirectory('./aihint-files/');\n?&gt;\n</code></pre>"},{"location":"api-reference/php-api/#error-handling","title":"Error Handling","text":"<pre><code>&lt;?php\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\AiHint;\nuse AiHint\\AiHintException;\n\ntry {\n    $aihint = new AiHint();\n    $aihint-&gt;load('aihint.json');\n    $aihint-&gt;verify('public_key.pem');\n} catch (AiHintException $e) {\n    echo \"AiHint error: \" . $e-&gt;getMessage() . \"\\n\";\n} catch (Exception $e) {\n    echo \"Unexpected error: \" . $e-&gt;getMessage() . \"\\n\";\n}\n?&gt;\n</code></pre>"},{"location":"api-reference/php-api/#wordpress-integration","title":"WordPress Integration","text":"<p>The PHP implementation is designed to work well with WordPress:</p> <pre><code>&lt;?php\n// In your WordPress plugin or theme\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\AiHint;\n\n// Create AiHint for your WordPress site\n$aihint = new AiHint([\n    'target' =&gt; get_site_url(),\n    'issuer' =&gt; get_site_url(),\n    'score' =&gt; 0.85,\n    'method' =&gt; 'aihint-core-v1',\n    'comment' =&gt; 'WordPress site trust metadata'\n]);\n\n// Save to .well-known directory\n$wellKnownDir = ABSPATH . '.well-known/';\nif (!is_dir($wellKnownDir)) {\n    mkdir($wellKnownDir, 0755, true);\n}\n\n$aihint-&gt;sign('private_key.pem');\n$aihint-&gt;save($wellKnownDir . 'aihint.json');\n?&gt;\n</code></pre>"},{"location":"api-reference/php-api/#configuration","title":"Configuration","text":"<p>The PHP implementation supports configuration through environment variables:</p> <ul> <li><code>AIHINT_DEFAULT_METHOD</code>: Default scoring method</li> <li><code>AIHINT_DEFAULT_EXPIRY_DAYS</code>: Default expiration period in days</li> <li><code>AIHINT_KEY_DIRECTORY</code>: Default directory for key files</li> <li><code>AIHINT_TIMEOUT</code>: HTTP timeout for remote fetching (default: 30 seconds)</li> <li><code>AIHINT_CACHE_DIR</code>: Directory for caching remote keys (default: <code>./cache</code>)</li> </ul>"},{"location":"api-reference/php-api/#advanced-features","title":"Advanced Features","text":""},{"location":"api-reference/php-api/#enhanced-schema-validation","title":"Enhanced Schema Validation","text":"<p>The PHP implementation includes enhanced schema validation with detailed error messages:</p> <pre><code>&lt;?php\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\AiHint;\nuse AiHint\\ValidationException;\n\ntry {\n    $aihint = new AiHint([\n        'target' =&gt; 'https://example.com',\n        'issuer' =&gt; 'https://example.com',\n        'score' =&gt; 1.5  // Invalid: score &gt; 1.0\n    ]);\n} catch (ValidationException $e) {\n    echo \"Validation error: \" . $e-&gt;getMessage() . \"\\n\";\n    echo \"Field: \" . $e-&gt;getField() . \"\\n\";\n    echo \"Value: \" . $e-&gt;getValue() . \"\\n\";\n}\n?&gt;\n</code></pre>"},{"location":"api-reference/php-api/#remote-key-fetching-with-caching","title":"Remote Key Fetching with Caching","text":"<p>Automatically fetch and cache public keys from URLs:</p> <pre><code>&lt;?php\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\AiHint;\nuse AiHint\\KeyManager;\n\n// The library will automatically fetch and cache remote keys\n$aihint = new AiHint();\n$aihint-&gt;load(\"aihint.json\");\n\n// This will fetch the public key from the URL and cache it\n$isValid = $aihint-&gt;verify();\n\necho $isValid ? \"Valid!\" : \"Invalid!\";\n?&gt;\n</code></pre>"},{"location":"api-reference/php-api/#custom-validation","title":"Custom Validation","text":"<p>You can add custom validation rules:</p> <pre><code>&lt;?php\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\AiHint;\n\nclass CustomAiHint extends AiHint {\n    protected function validateScore($score) {\n        parent::validateScore($score);\n\n        // Custom validation: score must be at least 0.5\n        if ($score &lt; 0.5) {\n            throw new ValidationException('Score must be at least 0.5');\n        }\n    }\n}\n\n$aihint = new CustomAiHint([\n    'target' =&gt; 'https://example.com',\n    'issuer' =&gt; 'https://example.com',\n    'score' =&gt; 0.3  // This will throw an error\n]);\n?&gt;\n</code></pre>"},{"location":"api-reference/php-api/#performance-considerations","title":"Performance Considerations","text":"<p>For high-traffic applications, consider caching verified AiHint metadata:</p> <pre><code>&lt;?php\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\AiHint;\n\nclass AiHintCache {\n    private $cache = [];\n\n    public function getVerifiedAiHint($url) {\n        if (isset($this-&gt;cache[$url])) {\n            return $this-&gt;cache[$url];\n        }\n\n        $aihint = AiHint::fromUrl($url);\n        if ($aihint-&gt;verify()) {\n            $this-&gt;cache[$url] = $aihint;\n            return $aihint;\n        }\n\n        return null;\n    }\n}\n\n$cache = new AiHintCache();\n$aihint = $cache-&gt;getVerifiedAiHint('https://example.com/.well-known/aihint.json');\n?&gt;\n</code></pre>"},{"location":"api-reference/php-api/#see-also","title":"See Also","text":"<ul> <li>Python API - Python implementation</li> <li>JavaScript API - Node.js implementation</li> <li>CLI Reference - Command-line interface</li> <li>Implementation Guide - Detailed usage guide </li> </ul>"},{"location":"api-reference/python-api/","title":"Python API Reference","text":"<p>The Python implementation of AiHint Standard provides a comprehensive library for creating, signing, and verifying AiHint metadata, including automated trust scoring capabilities.</p> <p>Other implementations: JavaScript | PHP</p>"},{"location":"api-reference/python-api/#installation","title":"Installation","text":"<pre><code>pip install aihint\n</code></pre>"},{"location":"api-reference/python-api/#quick-start","title":"Quick Start","text":"<pre><code>from aihint import AiHint\n\n# Create and sign AiHint metadata\naihint = AiHint(\n    target=\"https://example.com\",\n    issuer=\"https://example.com\",\n    score=0.85,\n    method=\"aihint-core-v1\"\n)\n\naihint.sign(\"private_key.pem\")\naihint.save(\"aihint.json\")\n</code></pre>"},{"location":"api-reference/python-api/#trust-scoring","title":"Trust Scoring","text":"<p>The Python implementation includes a comprehensive trust scoring system:</p> <pre><code>from aihint.scoring import TrustScoringEngine\n\n# Initialize the scoring engine\nengine = TrustScoringEngine()\n\n# Score a website\nresult = await engine.score_website(\"https://example.com\")\n\nprint(f\"Trust Score: {result.final_score:.3f}\")\nprint(f\"Trust Level: {result.trust_level.name}\")\nprint(f\"Confidence: {result.confidence:.3f}\")\n</code></pre>"},{"location":"api-reference/python-api/#cli-usage","title":"CLI Usage","text":"<pre><code># Score a single website\naihint scoring score https://example.com\n\n# Score multiple websites\naihint scoring batch https://example.com https://github.com\n\n# Create AiHint with automated scoring\naihint create-with-score --target https://example.com --issuer https://trust.aihint.org\n</code></pre>"},{"location":"api-reference/python-api/#core-classes","title":"Core Classes","text":""},{"location":"api-reference/python-api/#aihint","title":"AiHint","text":"<p>The main class for creating and managing AiHint metadata.</p>"},{"location":"api-reference/python-api/#constructor","title":"Constructor","text":"<pre><code>AiHint(\n    target: str,\n    issuer: str,\n    score: float,\n    method: str = \"aihint-core-v1\",\n    comment: str = None,\n    expires_at: datetime = None\n)\n</code></pre> <p>Parameters: - <code>target</code> (str): The target URL for this AiHint - <code>issuer</code> (str): The issuer URL - <code>score</code> (float): Trust score between 0.0 and 1.0 - <code>method</code> (str): Scoring method identifier - <code>comment</code> (str, optional): Additional comment - <code>expires_at</code> (datetime, optional): Expiration date</p>"},{"location":"api-reference/python-api/#methods","title":"Methods","text":""},{"location":"api-reference/python-api/#signprivate_key_path-str-none","title":"<code>sign(private_key_path: str) -&gt; None</code>","text":"<p>Sign the AiHint metadata with a private key.</p>"},{"location":"api-reference/python-api/#verifypublic_key_path-str-none-bool","title":"<code>verify(public_key_path: str = None) -&gt; bool</code>","text":"<p>Verify the signature of the AiHint metadata.</p>"},{"location":"api-reference/python-api/#savefile_path-str-none","title":"<code>save(file_path: str) -&gt; None</code>","text":"<p>Save the AiHint metadata to a JSON file.</p>"},{"location":"api-reference/python-api/#loadfile_path-str-none","title":"<code>load(file_path: str) -&gt; None</code>","text":"<p>Load AiHint metadata from a JSON file.</p>"},{"location":"api-reference/python-api/#validate-bool","title":"<code>validate() -&gt; bool</code>","text":"<p>Validate the AiHint metadata structure.</p>"},{"location":"api-reference/python-api/#key-management","title":"Key Management","text":""},{"location":"api-reference/python-api/#keymanager","title":"KeyManager","text":"<p>Utility class for generating and managing cryptographic keys.</p> <pre><code>from aihint import KeyManager\n\n# Generate a new key pair\nkey_manager = KeyManager()\nkey_manager.generate_keys(\"keys/\")\n\n# Load existing keys\nprivate_key = key_manager.load_private_key(\"keys/private_key.pem\")\npublic_key = key_manager.load_public_key(\"keys/public_key.pem\")\n</code></pre>"},{"location":"api-reference/python-api/#cli-usage_1","title":"CLI Usage","text":"<p>The Python implementation includes a command-line interface:</p> <pre><code># Generate keys\naihint generate-keys --output-dir ./keys\n\n# Create and sign AiHint\naihint create \\\n  --target \"https://example.com\" \\\n  --issuer \"https://example.com\" \\\n  --score 0.85 \\\n  --private-key \"keys/private_key.pem\" \\\n  --output \"aihint.json\"\n\n# Verify AiHint\naihint verify aihint.json\n\n# Validate AiHint\naihint validate aihint.json\n</code></pre>"},{"location":"api-reference/python-api/#examples","title":"Examples","text":""},{"location":"api-reference/python-api/#basic-usage","title":"Basic Usage","text":"<pre><code>from aihint import AiHint\nfrom datetime import datetime, timezone, timedelta\n\n# Create AiHint with expiration\nexpires_at = datetime.now(timezone.utc) + timedelta(days=365)\naihint = AiHint(\n    target=\"https://mywebsite.com\",\n    issuer=\"https://mywebsite.com\",\n    score=0.92,\n    method=\"aihint-core-v1\",\n    comment=\"My website trust metadata\",\n    expires_at=expires_at\n)\n\n# Sign and save\naihint.sign(\"private_key.pem\")\naihint.save(\"aihint.json\")\n</code></pre>"},{"location":"api-reference/python-api/#verification","title":"Verification","text":"<pre><code>from aihint import AiHint\n\n# Load and verify\naihint = AiHint()\naihint.load(\"aihint.json\")\n\nif aihint.verify(\"public_key.pem\"):\n    print(\"Signature is valid!\")\n    print(f\"Trust score: {aihint.score}\")\nelse:\n    print(\"Signature verification failed!\")\n</code></pre>"},{"location":"api-reference/python-api/#batch-processing","title":"Batch Processing","text":"<pre><code>import os\nfrom aihint import AiHint\n\ndef process_directory(directory):\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            filepath = os.path.join(directory, filename)\n            aihint = AiHint()\n            aihint.load(filepath)\n\n            if aihint.validate():\n                print(f\"{filename}: Valid\")\n            else:\n                print(f\"{filename}: Invalid\")\n</code></pre>"},{"location":"api-reference/python-api/#error-handling","title":"Error Handling","text":"<pre><code>from aihint import AiHintError\n\ntry:\n    aihint = AiHint()\n    aihint.load(\"aihint.json\")\n    aihint.verify(\"public_key.pem\")\nexcept AiHintError as e:\n    print(f\"AiHint error: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"api-reference/python-api/#configuration","title":"Configuration","text":"<p>The Python implementation supports configuration through environment variables:</p> <ul> <li><code>AIHINT_DEFAULT_METHOD</code>: Default scoring method</li> <li><code>AIHINT_DEFAULT_EXPIRY_DAYS</code>: Default expiration period in days</li> <li><code>AIHINT_KEY_DIRECTORY</code>: Default directory for key files</li> </ul>"},{"location":"api-reference/python-api/#see-also","title":"See Also","text":"<ul> <li>JavaScript API - Node.js implementation</li> <li>PHP API - PHP implementation</li> <li>CLI Reference - Command-line interface</li> <li>Implementation Guide - Detailed usage guide </li> </ul>"},{"location":"contributing/code-of-conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"contributing/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"contributing/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"contributing/code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"contributing/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces.</p>"},{"location":"contributing/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"contributing/code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"contributing/code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"contributing/code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"contributing/code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"contributing/code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"contributing/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations. </p>"},{"location":"contributing/contributing/","title":"Contributing to AiHint","text":"<p>Thank you for your interest in contributing to AiHint! This document provides guidelines and information for contributors.</p>"},{"location":"contributing/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project adheres to our Code of Conduct. By participating, you are expected to uphold this code.</p>"},{"location":"contributing/contributing/#how-can-i-contribute","title":"How Can I Contribute?","text":""},{"location":"contributing/contributing/#reporting-bugs","title":"Reporting Bugs","text":"<ul> <li>Use the GitHub issue tracker</li> <li>Include detailed steps to reproduce</li> <li>Provide environment information (OS, Python version, etc.)</li> </ul>"},{"location":"contributing/contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<ul> <li>Open a feature request issue</li> <li>Describe the use case and benefits</li> <li>Consider implementation complexity</li> </ul>"},{"location":"contributing/contributing/#code-contributions","title":"Code Contributions","text":"<ul> <li>Fork the repository</li> <li>Create a feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Make your changes</li> <li>Add tests for new functionality</li> <li>Ensure all tests pass</li> <li>Update documentation if needed</li> <li>Submit a pull request</li> </ul>"},{"location":"contributing/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Fork and clone the repository <pre><code>git clone https://github.com/Ai-Hint/aihint-standard.git\ncd aihint-standard\n</code></pre></p> </li> <li> <p>Install dependencies <pre><code>pip install -r requirements.txt\npip install -e .\n</code></pre></p> </li> <li> <p>Run tests <pre><code>pytest tests/ -v\n</code></pre></p> </li> </ol>"},{"location":"contributing/contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 for Python code</li> <li>Use type hints where appropriate</li> <li>Write docstrings for all public functions</li> <li>Keep functions focused and concise</li> </ul>"},{"location":"contributing/contributing/#testing","title":"Testing","text":"<ul> <li>Write tests for new functionality</li> <li>Ensure existing tests continue to pass</li> <li>Aim for good test coverage</li> <li>Use descriptive test names</li> </ul>"},{"location":"contributing/contributing/#documentation","title":"Documentation","text":"<ul> <li>Update relevant documentation when adding features</li> <li>Include examples for new functionality</li> <li>Keep API documentation current</li> </ul>"},{"location":"contributing/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update the README.md with details of changes if applicable</li> <li>The PR will be merged once you have the sign-off of at least one maintainer</li> </ol>"},{"location":"contributing/contributing/#release-process","title":"Release Process","text":"<ol> <li>Update version in <code>setup.py</code> and <code>aihint/__init__.py</code></li> <li>Create a release tag</li> <li>Publish to PyPI (if applicable)</li> </ol>"},{"location":"contributing/contributing/#questions","title":"Questions?","text":"<p>If you have questions about contributing, please open an issue or reach out to the maintainers.</p> <p>Thank you for contributing to AiHint! </p>"},{"location":"contributing/security/","title":"Security Policy","text":"<p>If you discover a security vulnerability in AiHint, please report it responsibly.</p> <ul> <li>Email: contact@aihint.org</li> <li>GitHub Issues: Security advisories</li> </ul>"},{"location":"contributing/security/#supported-versions","title":"Supported Versions","text":"Version Supported 0.1.x \u2705"},{"location":"contributing/security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<ol> <li>Do not open a public issue for security problems.</li> <li>Email us or use GitHub security advisories.</li> <li>We will coordinate a fix and disclosure.</li> </ol> <p>Thank you for helping keep AiHint safe! </p>"},{"location":"getting-started/choose-implementation/","title":"Choose Your Implementation","text":"<p>AiHint Standard is available in multiple programming languages. Choose the implementation that best fits your project:</p>"},{"location":"getting-started/choose-implementation/#available-implementations","title":"Available Implementations","text":""},{"location":"getting-started/choose-implementation/#python","title":"\ud83d\udc0d Python","text":"<p>Best for: Data science, automation, server-side applications</p> <p>Features: - \u2705 Core library with full API - \u2705 Command-line interface (CLI) - \u2705 Key generation and management - \u2705 Comprehensive validation - \u2705 Well-documented with examples</p> <p>Quick Start: <pre><code>pip install aihint\naihint --help\n</code></pre></p> <p>View Python Documentation \u2192</p>"},{"location":"getting-started/choose-implementation/#javascriptnodejs","title":"\ud83d\udfe8 JavaScript/Node.js","text":"<p>Best for: Web applications, Node.js backends, browser integration</p> <p>Features: - \u2705 Core library with TypeScript support - \u2705 Command-line interface (CLI) - \u2705 Key generation and management - \u2705 Remote key fetching - \u2705 Enhanced schema validation</p> <p>Quick Start: <pre><code>npm install aihint-js\nnpx aihint --help\n</code></pre></p> <p>View JavaScript Documentation \u2192</p>"},{"location":"getting-started/choose-implementation/#php","title":"\ud83d\udc18 PHP","text":"<p>Best for: WordPress, legacy web applications, shared hosting</p> <p>Features: - \u2705 Core library for signing and verification - \u2705 Command-line interface (CLI) - \u2705 Key generation and management - \u2705 Remote key fetching with caching - \u2705 Validation and schema checking - \u2705 Simple integration - \u2705 Lightweight implementation</p> <p>Quick Start: <pre><code>composer require aihint/aihint-php\nphp vendor/bin/aihint --help\n</code></pre></p> <p>View PHP Documentation \u2192</p>"},{"location":"getting-started/choose-implementation/#comparison-table","title":"Comparison Table","text":"Feature Python JavaScript PHP Core Library \u2705 \u2705 \u2705 CLI Interface \u2705 \u2705 \u2705 Key Generation \u2705 \u2705 \u2705 TypeScript Support \u274c \u2705 \u274c Remote Key Fetching \u274c \u2705 \u2705 Schema Validation \u2705 \u2705 \u2705 Documentation \u2705 \u2705 \u2705"},{"location":"getting-started/choose-implementation/#recommendation","title":"Recommendation","text":"<ul> <li>Choose Python if you're doing data processing, automation, or need the most mature implementation</li> <li>Choose JavaScript if you're building web applications or need TypeScript support</li> <li>Choose PHP if you're working with WordPress or need a lightweight solution</li> </ul>"},{"location":"getting-started/choose-implementation/#next-steps","title":"Next Steps","text":"<p>Once you've chosen your implementation:</p> <ol> <li>Quick Start Guide - Get up and running in minutes</li> <li>Installation Guide - Detailed setup instructions</li> <li>Key Concepts - Understand the fundamentals</li> </ol>"},{"location":"getting-started/choose-implementation/#need-help","title":"Need Help?","text":"<ul> <li>Check the FAQ for common questions</li> <li>Review the Implementation Guide for detailed examples</li> <li>See the Technical Reference for protocol details </li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> </ul>"},{"location":"getting-started/installation/#installation-options","title":"Installation Options","text":""},{"location":"getting-started/installation/#option-1-install-from-source-recommended","title":"Option 1: Install from Source (Recommended)","text":"<pre><code># Clone the repository\ngit clone https://github.com/aihint/aihint-standard.git\ncd aihint-standard\n\n# Install in development mode\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#option-2-install-dependencies-only","title":"Option 2: Install Dependencies Only","text":"<pre><code># Install required dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#option-3-install-from-pypi-future","title":"Option 3: Install from PyPI (Future)","text":"<pre><code># When available on PyPI\npip install aihint\n</code></pre>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>The following packages are required:</p> <ul> <li><code>cryptography&gt;=41.0.0</code> - Cryptographic operations</li> <li><code>requests&gt;=2.31.0</code> - HTTP requests for key fetching</li> <li><code>jsonschema&gt;=4.19.0</code> - JSON schema validation</li> <li><code>click&gt;=8.1.0</code> - CLI framework</li> <li><code>pydantic&gt;=2.4.0</code> - Data validation</li> <li><code>pytest&gt;=7.0.0</code> - Testing framework</li> </ul>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>After installation, verify that AiHint is working:</p> <pre><code># Check CLI is available\naihint --help\n\n# Run tests\npython -m pytest tests/ -v\n\n# Run example\npython examples/create_hint.py\n</code></pre>"},{"location":"getting-started/installation/#development-setup","title":"Development Setup","text":"<p>For contributors:</p> <pre><code># Install development dependencies\npip install -r requirements.txt\npip install -r docs-requirements.txt\n\n# Install in development mode\npip install -e .\n\n# Run tests\npytest tests/ -v\n\n# Build documentation\nmkdocs build\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<ol> <li>Import Error: Make sure you're in the correct directory and have installed the package</li> <li>Permission Error: Use <code>pip install --user</code> or create a virtual environment</li> <li>Missing Dependencies: Run <code>pip install -r requirements.txt</code></li> </ol>"},{"location":"getting-started/installation/#virtual-environment-recommended","title":"Virtual Environment (Recommended)","text":"<pre><code># Create virtual environment\npython -m venv aihint-env\n\n# Activate (Linux/Mac)\nsource aihint-env/bin/activate\n\n# Activate (Windows)\naihint-env\\Scripts\\activate\n\n# Install\npip install -e .\n</code></pre>"},{"location":"getting-started/key-concepts/","title":"Key Concepts","text":"<ul> <li>AiHint Metadata: Signed, verifiable JSON describing a website's trust and properties.</li> <li>Signing: Use private keys to sign metadata, proving authenticity.</li> <li>Verification: Anyone can verify signatures using the public key.</li> <li>Issuers: Entities that sign AiHint metadata. Can be self-signed or official.</li> <li>Trust Model: Consumers trust official issuers by default; self-signed only if explicitly trusted. </li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>This guide will help you get started with AiHint Standard in just a few minutes.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ol> <li>Chosen your implementation - Select Python, JavaScript, or PHP</li> <li>Basic programming knowledge in your chosen language</li> <li>A website or domain where you want to add AiHint metadata</li> </ol>"},{"location":"getting-started/quick-start/#step-1-install-your-implementation","title":"Step 1: Install Your Implementation","text":""},{"location":"getting-started/quick-start/#python","title":"Python","text":"<pre><code>pip install aihint\n</code></pre>"},{"location":"getting-started/quick-start/#javascriptnodejs","title":"JavaScript/Node.js","text":"<pre><code>npm install aihint-js\n</code></pre>"},{"location":"getting-started/quick-start/#php","title":"PHP","text":"<pre><code>composer require aihint/aihint-php\nphp vendor/bin/aihint generate-keys --output-dir ./keys\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-generate-keys-optional","title":"Step 2: Generate Keys (Optional)","text":"<p>For self-signing, you'll need cryptographic keys:</p>"},{"location":"getting-started/quick-start/#python_1","title":"Python","text":"<pre><code>aihint generate-keys --output-dir ./keys\n</code></pre>"},{"location":"getting-started/quick-start/#javascript","title":"JavaScript","text":"<pre><code>npx aihint generate-keys --output-dir ./keys\n</code></pre>"},{"location":"getting-started/quick-start/#php_1","title":"PHP","text":"<pre><code>&lt;?php\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\KeyManager;\n\n$keyManager = new KeyManager();\n$keyManager-&gt;generateKeys('./keys');\n?&gt;\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-create-your-first-aihint","title":"Step 3: Create Your First AiHint","text":""},{"location":"getting-started/quick-start/#python_2","title":"Python","text":"<pre><code>from aihint import AiHint\n\n# Create AiHint metadata\naihint = AiHint(\n    target=\"https://example.com\",\n    issuer=\"https://example.com\",\n    score=0.85,\n    method=\"aihint-core-v1\"\n)\n\n# Sign with your private key\naihint.sign(\"keys/private_key.pem\")\n\n# Save to file\naihint.save(\"aihint.json\")\n</code></pre>"},{"location":"getting-started/quick-start/#javascript_1","title":"JavaScript","text":"<pre><code>const { AiHint } = require('aihint-js');\n\n// Create AiHint metadata\nconst aihint = new AiHint({\n    target: \"https://example.com\",\n    issuer: \"https://example.com\",\n    score: 0.85,\n    method: \"aihint-core-v1\"\n});\n\n// Sign with your private key\naihint.sign(\"keys/private_key.pem\");\n\n// Save to file\naihint.save(\"aihint.json\");\n</code></pre>"},{"location":"getting-started/quick-start/#php_2","title":"PHP","text":"<pre><code>&lt;?php\nrequire_once 'vendor/autoload.php';\n\nuse AiHint\\AiHint;\n\n// Create AiHint metadata\n$aihint = new AiHint([\n    'target' =&gt; 'https://example.com',\n    'issuer' =&gt; 'https://example.com',\n    'score' =&gt; 0.85,\n    'method' =&gt; 'aihint-core-v1'\n]);\n\n// Sign with your private key\n$aihint-&gt;sign('keys/private_key.pem');\n\n// Save to file\n$aihint-&gt;save('aihint.json');\n?&gt;\n</code></pre>"},{"location":"getting-started/quick-start/#step-4-deploy-to-your-website","title":"Step 4: Deploy to Your Website","text":"<p>Place the generated <code>aihint.json</code> file at: <pre><code>https://yourdomain.com/.well-known/aihint.json\n</code></pre></p>"},{"location":"getting-started/quick-start/#step-5-verify-your-implementation","title":"Step 5: Verify Your Implementation","text":""},{"location":"getting-started/quick-start/#python_3","title":"Python","text":"<pre><code>aihint verify https://yourdomain.com/.well-known/aihint.json\n</code></pre>"},{"location":"getting-started/quick-start/#javascript_2","title":"JavaScript","text":"<pre><code>npx aihint verify https://yourdomain.com/.well-known/aihint.json\n</code></pre>"},{"location":"getting-started/quick-start/#php_3","title":"PHP","text":"<pre><code>php vendor/bin/aihint verify https://yourdomain.com/.well-known/aihint.json\n</code></pre>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<ul> <li>Installation Guide - Detailed setup instructions</li> <li>Key Concepts - Understand the fundamentals</li> <li>Implementation Guide - Advanced usage examples</li> <li>API Reference - Complete API documentation</li> </ul>"},{"location":"getting-started/quick-start/#need-help","title":"Need Help?","text":"<ul> <li>Check the FAQ for common questions</li> <li>Review the Implementation Guide for detailed examples</li> <li>See the Technical Reference for protocol details </li> </ul>"},{"location":"technical/faq/","title":"Frequently Asked Questions","text":""},{"location":"technical/faq/#what-is-aihint","title":"What is AiHint?","text":"<p>AiHint is an open standard for signed, verifiable website metadata for AI systems and intelligent agents. It allows websites to publish cryptographically signed trust and metadata files that can be read and verified by AI, LLMs, and other consumers.</p>"},{"location":"technical/faq/#who-can-issue-aihint-metadata","title":"Who can issue AiHint metadata?","text":"<p>Anyone can generate their own keys and self-sign AiHint metadata using the open source tools. However, self-signed metadata is not globally trusted by default. For production, public, or commercial use, you should use the official AiHint Issuer service, which provides domain validation, billing, and global trust.</p>"},{"location":"technical/faq/#what-is-the-aihint-official-issuer-service","title":"What is the AiHint Official Issuer Service?","text":"<p>The AiHint Official Issuer Service is a managed, closed-source platform that acts as the top-level trust authority for AiHint. It verifies issuers, manages billing, and issues globally trusted certificates for signing AiHint metadata. Only metadata signed by an official issuer is globally recognized and trusted by default.</p>"},{"location":"technical/faq/#how-do-i-become-an-official-aihint-issuer","title":"How do I become an official AiHint issuer?","text":"<p>You can apply through the AiHint Official Issuer Service. The process involves domain validation, registration, and (for some plans) billing. Once approved, you receive a certificate or key signed by AiHint, allowing you to issue globally trusted AiHint metadata.</p>"},{"location":"technical/faq/#can-i-still-use-aihint-for-free","title":"Can I still use AiHint for free?","text":"<p>Yes! The open source tools and protocol are free for experimentation, development, and self-hosted/private use. Only official issuer status (for global trust and production use) requires registration and may involve billing.</p>"},{"location":"technical/faq/#what-happens-if-my-issuer-key-is-compromised","title":"What happens if my issuer key is compromised?","text":"<p>If you are an official issuer, you can revoke your certificate through the AiHint Issuer Service. Revocations are published in a public list. For self-signed keys, you should rotate your keys and update your metadata.</p>"},{"location":"technical/faq/#how-does-trust-work-in-aihint","title":"How does trust work in AiHint?","text":"<p>Consumers (AIs, apps, etc.) trust metadata signed by official AiHint issuers by default. Self-signed metadata is only trusted if the consumer explicitly adds the issuer's key.</p>"},{"location":"technical/faq/#where-can-i-learn-more-or-get-support","title":"Where can I learn more or get support?","text":"<p>See the documentation, join our community channels, or contact the AiHint team for more information.</p>"},{"location":"technical/protocol/","title":"Protocol &amp; Data Model","text":"<ul> <li>JSON-based metadata</li> <li>Signed with private key, verified with public key</li> <li>See schema for required fields </li> </ul>"},{"location":"technical/security-considerations/","title":"AiHint Security Considerations","text":"<p>AiHint is designed to provide verifiable, tamper-evident metadata for websites. Security is critical to its trustworthiness.</p>"},{"location":"technical/security-considerations/#signature-algorithms","title":"Signature Algorithms","text":"<ul> <li>Default: RSA 2048-bit with SHA-256</li> <li>Padding: PKCS#1 v1.5</li> <li>Encoding: Base64</li> </ul>"},{"location":"technical/security-considerations/#key-management","title":"Key Management","text":"<ul> <li>Keep private keys secure and offline when possible</li> <li>Rotate keys regularly</li> <li>Use strong, unique passphrases for key storage</li> </ul>"},{"location":"technical/security-considerations/#attack-vectors","title":"Attack Vectors","text":"<ul> <li>Key compromise: If a private key is leaked, all issued hints can be forged</li> <li>Replay attacks: Use <code>issued_at</code> and <code>expires_at</code> to limit hint validity</li> <li>Man-in-the-middle: Always fetch public keys and aihint.json over HTTPS</li> <li>Signature algorithm downgrade: Only accept strong, documented algorithms</li> </ul>"},{"location":"technical/security-considerations/#recommendations","title":"Recommendations","text":"<ul> <li>Validate all fields and signatures before trusting a hint</li> <li>Monitor for revoked or expired keys</li> <li>Use trusted authorities for <code>issuer</code> and <code>public_key_url</code></li> <li>Consider using certificate transparency or public key pinning for issuers </li> </ul>"},{"location":"technical/signatures/","title":"AiHint Signature Algorithm","text":""},{"location":"technical/signatures/#algorithm","title":"Algorithm","text":"<ul> <li>Type: RSA</li> <li>Key Size: 2048 bits (minimum)</li> <li>Hash: SHA-256</li> <li>Padding: PKCS#1 v1.5</li> <li>Encoding: Base64</li> </ul>"},{"location":"technical/signatures/#signing-process","title":"Signing Process","text":"<ol> <li>Remove the <code>signature</code> field from the JSON object.</li> <li>Sort all keys alphabetically.</li> <li>Serialize to canonical JSON (no whitespace, sorted keys).</li> <li>Sign the resulting bytes with the issuer's private RSA key.</li> <li>Encode the signature in Base64 and insert as the <code>signature</code> field.</li> </ol>"},{"location":"technical/signatures/#verification-process","title":"Verification Process","text":"<ol> <li>Remove the <code>signature</code> field from the JSON object.</li> <li>Sort all keys alphabetically.</li> <li>Serialize to canonical JSON (no whitespace, sorted keys).</li> <li>Fetch the issuer's public key from <code>public_key_url</code>.</li> <li>Verify the signature using RSA/SHA-256.</li> </ol>"},{"location":"technical/signatures/#example","title":"Example","text":"<p>See <code>examples/create_hint.py</code> for a full signing workflow. </p>"},{"location":"technical/trust-model/","title":"Trust Model","text":"<ul> <li>Official issuers are trusted by default</li> <li>Self-signed issuers require explicit trust</li> <li>Revocation and transparency for compromised keys </li> </ul>"},{"location":"user-guide/example-workflows/","title":"Example Workflows","text":""},{"location":"user-guide/example-workflows/#1-create-and-sign-metadata","title":"1. Create and Sign Metadata","text":"<ul> <li>Fill out required fields</li> <li>Sign with your private key</li> </ul>"},{"location":"user-guide/example-workflows/#2-publish-metadata","title":"2. Publish Metadata","text":"<ul> <li>Place at <code>/.well-known/aihint.json</code> on your site</li> </ul>"},{"location":"user-guide/example-workflows/#3-verify-metadata","title":"3. Verify Metadata","text":"<ul> <li>Use CLI or libraries to verify signature and schema</li> </ul>"},{"location":"user-guide/example-workflows/#4-rotate-keys","title":"4. Rotate Keys","text":"<ul> <li>Generate new keys, update metadata, and republish </li> </ul>"},{"location":"user-guide/implementation-guide/","title":"AiHint Implementation Guide","text":"<p>This guide walks you through integrating AiHint into your website or service.</p>"},{"location":"user-guide/implementation-guide/#1-generate-key-pair","title":"1. Generate Key Pair","text":"<pre><code>openssl genpkey -algorithm RSA -out private_key.pem -pkeyopt rsa_keygen_bits:2048\nopenssl rsa -pubout -in private_key.pem -out public_key.pem\n</code></pre>"},{"location":"user-guide/implementation-guide/#2-create-aihint-metadata","title":"2. Create AiHint Metadata","text":"<p>Use the CLI or Python API:</p> <pre><code>aihint create \\\n  --target \"https://yourdomain.com\" \\\n  --issuer \"https://your-issuer.com\" \\\n  --score 0.95 \\\n  --method \"aihint-core-v1\" \\\n  --public-key-url \"https://your-issuer.com/pubkey.pem\" \\\n  --private-key private_key.pem \\\n  --output .well-known/aihint.json\n</code></pre>"},{"location":"user-guide/implementation-guide/#3-publish-files","title":"3. Publish Files","text":"<ul> <li>Place <code>aihint.json</code> at <code>https://yourdomain.com/.well-known/aihint.json</code></li> <li>Host your public key at the <code>public_key_url</code></li> </ul>"},{"location":"user-guide/implementation-guide/#4-verification","title":"4. Verification","text":"<ul> <li>Use the CLI or Python API to verify your hint: <pre><code>aihint verify .well-known/aihint.json\n</code></pre></li> </ul>"},{"location":"user-guide/implementation-guide/#5-rotate-keys-recommended","title":"5. Rotate Keys (Recommended)","text":"<ul> <li>Generate new keys periodically</li> <li>Update <code>public_key_url</code> and re-sign your hints</li> </ul>"},{"location":"user-guide/implementation-guide/#6-example","title":"6. Example","text":"<p>See <code>examples/create_hint.py</code> for a full workflow. </p>"},{"location":"user-guide/key-management/","title":"Key Management","text":"<ul> <li>Generating Keys: Use CLI or libraries to generate RSA key pairs.</li> <li>Rotating Keys: Regularly update your keys for security.</li> <li>Publishing Public Keys: Host your public key at a well-known URL for verification.</li> <li>Private Key Security: Keep your private key secret and secure. </li> </ul>"},{"location":"user-guide/trust-scoring/","title":"Trust Scoring System","text":"<p>The AiHint Trust Scoring System provides automated, comprehensive trust assessment for websites across Python, PHP, and JavaScript implementations, enabling AI systems to make informed decisions about content reliability and safety.</p>"},{"location":"user-guide/trust-scoring/#overview","title":"Overview","text":"<p>The trust scoring system analyzes websites across three key dimensions with enhanced capabilities:</p> <ul> <li>Security: SSL/TLS configuration, security headers, malware detection</li> <li>Reputation: Domain age, historical incidents, third-party reputation, enhanced incident tracking</li> <li>Compliance: Privacy policies, contact information, legal compliance, business registration validation</li> </ul>"},{"location":"user-guide/trust-scoring/#cross-platform-support","title":"Cross-Platform Support","text":"<p>The trust scoring system is fully implemented across all platforms:</p> <ul> <li>Python: Complete async scoring engine with detailed analysis</li> <li>PHP: Production-ready scoring with Composer integration  </li> <li>JavaScript: Modern web-optimized scoring with TypeScript support</li> <li>Consistent API: Unified scoring interface across all platforms</li> </ul>"},{"location":"user-guide/trust-scoring/#quick-start","title":"Quick Start","text":""},{"location":"user-guide/trust-scoring/#basic-scoring","title":"Basic Scoring","text":"<p>Score a single website:</p> <pre><code>aihint scoring score https://example.com\n</code></pre> <p>Score with verbose output:</p> <pre><code>aihint scoring score https://example.com --verbose\n</code></pre>"},{"location":"user-guide/trust-scoring/#batch-scoring","title":"Batch Scoring","text":"<p>Score multiple websites:</p> <pre><code>aihint scoring batch --urls https://example.com,https://github.com,https://stackoverflow.com\n</code></pre>"},{"location":"user-guide/trust-scoring/#automated-aihint-generation","title":"Automated AiHint Generation","text":"<p>Create an AiHint with automated scoring:</p> <pre><code>aihint create-with-score \\\n  --target \"https://example.com\" \\\n  --issuer \"https://trust.aihint.org\" \\\n  --public-key-url \"https://trust.aihint.org/pubkey.pem\" \\\n  --verbose \\\n  --output \"scored_aihint.json\"\n</code></pre>"},{"location":"user-guide/trust-scoring/#enhanced-features-v110","title":"Enhanced Features (v1.1.0)","text":""},{"location":"user-guide/trust-scoring/#phase-2-enhancements-advanced-incident-tracking","title":"Phase 2 Enhancements - Advanced Incident Tracking","text":"<p>The reputation analysis now includes 4 new incident detection capabilities:</p> <ul> <li>Data Breach Detection: Historical data breach checking and pattern analysis</li> <li>Malware History Tracking: Domain malware incident analysis and risk assessment  </li> <li>Phishing Incident Analysis: Phishing history tracking and domain pattern recognition</li> <li>Regulatory Violation Detection: Compliance violation tracking and pattern analysis</li> </ul>"},{"location":"user-guide/trust-scoring/#phase-3-enhancements-advanced-compliance-validation","title":"Phase 3 Enhancements - Advanced Compliance Validation","text":"<p>The compliance analysis now includes enhanced business validation:</p> <ul> <li>Business Registration Validation: Advanced business legitimacy assessment</li> <li>Business indicator detection in URLs and content</li> <li>Corporate structure analysis and legal entity verification</li> <li>Professional contact validation and social media presence analysis</li> <li>Regulatory Compliance Analysis: Enhanced compliance framework assessment</li> <li>GDPR/CCPA compliance indicator detection</li> <li>Regulatory keyword analysis and pattern recognition</li> <li>Compliance mechanism evaluation and scoring</li> <li>Data Protection Compliance: Improved privacy and data handling assessment</li> <li>Privacy policy quality analysis and content evaluation</li> <li>Data handling transparency assessment</li> <li>Protection mechanism evaluation and scoring</li> </ul>"},{"location":"user-guide/trust-scoring/#performance-improvements","title":"Performance Improvements","text":"<ul> <li>+7.9% improvement in average trust scores (0.580 \u2192 0.626)</li> <li>+33% better consistency with reduced score variance across platforms</li> <li>90% specification compliance achieved (up from 83%)</li> <li>Enhanced Phase 2: 85% compliance (+15% improvement)</li> <li>Enhanced Phase 3: 90% compliance (+7% improvement)</li> </ul>"},{"location":"user-guide/trust-scoring/#scoring-methodology","title":"Scoring Methodology","text":""},{"location":"user-guide/trust-scoring/#phase-1-core-security-metrics","title":"Phase 1: Core Security Metrics","text":""},{"location":"user-guide/trust-scoring/#ssltls-validation","title":"SSL/TLS Validation","text":"<ul> <li>Certificate validity and expiration</li> <li>Cipher strength and protocol versions</li> <li>Certificate chain validation</li> <li>HSTS (HTTP Strict Transport Security) presence</li> </ul>"},{"location":"user-guide/trust-scoring/#security-headers-analysis","title":"Security Headers Analysis","text":"<ul> <li>Content Security Policy (CSP)</li> <li>X-Frame-Options</li> <li>X-Content-Type-Options</li> <li>Referrer-Policy</li> <li>Permissions-Policy</li> </ul>"},{"location":"user-guide/trust-scoring/#malware-and-phishing-detection","title":"Malware and Phishing Detection","text":"<ul> <li>Google Safe Browsing API integration</li> <li>VirusTotal database checks</li> <li>PhishTank phishing detection</li> <li>Real-time threat intelligence</li> </ul>"},{"location":"user-guide/trust-scoring/#domain-reputation","title":"Domain Reputation","text":"<ul> <li>WHOIS analysis and domain information</li> <li>Blacklist checking</li> <li>Domain registration details</li> <li>Registrar reputation</li> </ul>"},{"location":"user-guide/trust-scoring/#phase-2-reputation-signals","title":"Phase 2: Reputation Signals","text":""},{"location":"user-guide/trust-scoring/#domain-age-analysis","title":"Domain Age Analysis","text":"<ul> <li>Registration date analysis</li> <li>Domain maturity scoring</li> <li>Historical stability assessment</li> </ul>"},{"location":"user-guide/trust-scoring/#historical-incident-tracking","title":"Historical Incident Tracking","text":"<ul> <li>Security breach history</li> <li>Downtime incidents</li> <li>Reputation degradation events</li> </ul>"},{"location":"user-guide/trust-scoring/#third-party-reputation-apis","title":"Third-Party Reputation APIs","text":"<ul> <li>External reputation services</li> <li>Community trust indicators</li> <li>Industry-specific assessments</li> </ul>"},{"location":"user-guide/trust-scoring/#phase-3-content-compliance","title":"Phase 3: Content &amp; Compliance","text":""},{"location":"user-guide/trust-scoring/#privacy-policy-detection","title":"Privacy Policy Detection","text":"<ul> <li>Privacy policy presence and accessibility</li> <li>GDPR compliance indicators</li> <li>Data handling transparency</li> </ul>"},{"location":"user-guide/trust-scoring/#contact-information-validation","title":"Contact Information Validation","text":"<ul> <li>Contact details verification</li> <li>Business registration validation</li> <li>Physical address verification</li> </ul>"},{"location":"user-guide/trust-scoring/#legal-compliance-indicators","title":"Legal Compliance Indicators","text":"<ul> <li>Terms of service presence</li> <li>Legal entity verification</li> <li>Regulatory compliance checks</li> </ul>"},{"location":"user-guide/trust-scoring/#trust-levels","title":"Trust Levels","text":"<p>The system classifies websites into five trust levels:</p> Trust Level Score Range Description Highly Trusted 0.9-1.0 Banks, major corporations, verified entities Good Trust 0.7-0.89 Legitimate businesses, established sites Moderate Trust 0.5-0.69 Newer sites, some concerns Low Trust 0.3-0.49 Multiple red flags, proceed with caution Very Low Trust 0.0-0.29 Malicious, compromised, or highly suspicious"},{"location":"user-guide/trust-scoring/#configuration","title":"Configuration","text":""},{"location":"user-guide/trust-scoring/#default-configuration","title":"Default Configuration","text":"<p>The system uses sensible defaults, but you can customize scoring behavior:</p> <pre><code># Generate sample configuration\naihint scoring config --output scoring_config.json\n</code></pre>"},{"location":"user-guide/trust-scoring/#custom-configuration","title":"Custom Configuration","text":"<pre><code>{\n  \"timeout\": 30,\n  \"weights\": {\n    \"security\": 0.4,\n    \"reputation\": 0.35,\n    \"compliance\": 0.25\n  },\n  \"scorers\": {\n    \"ssl_tls\": {\n      \"enabled\": true,\n      \"weight\": 0.3,\n      \"min_cipher_strength\": 128\n    },\n    \"security_headers\": {\n      \"enabled\": true,\n      \"weight\": 0.2,\n      \"required_headers\": [\"HSTS\", \"CSP\"]\n    },\n    \"malware\": {\n      \"enabled\": true,\n      \"weight\": 0.3,\n      \"apis\": {\n        \"google_safe_browsing\": true,\n        \"virustotal\": true,\n        \"phishtank\": true\n      }\n    },\n    \"domain_reputation\": {\n      \"enabled\": true,\n      \"weight\": 0.2\n    },\n    \"domain_age\": {\n      \"enabled\": true,\n      \"weight\": 0.15,\n      \"min_age_days\": 30\n    },\n    \"incidents\": {\n      \"enabled\": true,\n      \"weight\": 0.1\n    },\n    \"privacy_policy\": {\n      \"enabled\": true,\n      \"weight\": 0.1\n    },\n    \"contact\": {\n      \"enabled\": true,\n      \"weight\": 0.1\n    },\n    \"compliance\": {\n      \"enabled\": true,\n      \"weight\": 0.05\n    }\n  }\n}\n</code></pre>"},{"location":"user-guide/trust-scoring/#using-custom-configuration","title":"Using Custom Configuration","text":"<pre><code>aihint scoring score https://example.com --config my_config.json\naihint create-with-score --target https://example.com --config my_config.json\n</code></pre>"},{"location":"user-guide/trust-scoring/#output-formats","title":"Output Formats","text":""},{"location":"user-guide/trust-scoring/#text-format-default","title":"Text Format (Default)","text":"<pre><code>Website: https://example.com\nTrust Score: 0.688 (MODERATE)\nConfidence: 1.000\n\nSecurity Score: 0.488\n- SSL/TLS: 0.600\n- Security Headers: 0.300\n- Malware Check: 0.500\n- Domain Reputation: 0.400\n\nReputation Score: 0.958\n- Domain Age: 0.900\n- Incidents: 1.000\n\nCompliance Score: 0.632\n- Privacy Policy: 0.500\n- Contact Info: 0.800\n- Legal Compliance: 0.600\n</code></pre>"},{"location":"user-guide/trust-scoring/#table-format","title":"Table Format","text":"<pre><code>aihint scoring score https://example.com --format table\n</code></pre>"},{"location":"user-guide/trust-scoring/#json-format","title":"JSON Format","text":"<pre><code>aihint scoring score https://example.com --format json\n</code></pre>"},{"location":"user-guide/trust-scoring/#integration-examples","title":"Integration Examples","text":""},{"location":"user-guide/trust-scoring/#python-api","title":"Python API","text":"<pre><code>from aihint.scoring import TrustScoringEngine\nimport asyncio\n\nasync def score_website():\n    engine = TrustScoringEngine()\n    result = await engine.score_website(\"https://example.com\")\n\n    print(f\"Trust Score: {result.final_score}\")\n    print(f\"Trust Level: {result.trust_level.name}\")\n    print(f\"Security: {result.security_score}\")\n    print(f\"Reputation: {result.reputation_score}\")\n    print(f\"Compliance: {result.compliance_score}\")\n\n# Run the scoring\nasyncio.run(score_website())\n</code></pre>"},{"location":"user-guide/trust-scoring/#batch-processing","title":"Batch Processing","text":"<pre><code>from aihint.scoring import TrustScoringEngine\nimport asyncio\n\nasync def batch_score():\n    engine = TrustScoringEngine()\n    urls = [\n        \"https://example.com\",\n        \"https://github.com\",\n        \"https://stackoverflow.com\"\n    ]\n\n    results = await engine.score_websites(urls)\n\n    for result in results:\n        print(f\"{result.url}: {result.final_score:.3f} ({result.trust_level.name})\")\n\nasyncio.run(batch_score())\n</code></pre>"},{"location":"user-guide/trust-scoring/#performance-considerations","title":"Performance Considerations","text":""},{"location":"user-guide/trust-scoring/#timeouts","title":"Timeouts","text":"<ul> <li>Default timeout: 30 seconds per website</li> <li>Configurable per scorer and overall</li> <li>Graceful degradation on timeouts</li> </ul>"},{"location":"user-guide/trust-scoring/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Respects API rate limits for external services</li> <li>Implements exponential backoff</li> <li>Caches results to reduce API calls</li> </ul>"},{"location":"user-guide/trust-scoring/#caching","title":"Caching","text":"<ul> <li>Results cached for 1 hour by default</li> <li>Configurable cache duration</li> <li>Cache invalidation on errors</li> </ul>"},{"location":"user-guide/trust-scoring/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/trust-scoring/#common-issues","title":"Common Issues","text":""},{"location":"user-guide/trust-scoring/#ssl-certificate-errors","title":"SSL Certificate Errors","text":"<p><pre><code>Error: SSL certificate verification failed\n</code></pre> Solution: Check if the website has valid SSL certificates</p>"},{"location":"user-guide/trust-scoring/#api-rate-limiting","title":"API Rate Limiting","text":"<p><pre><code>Error: Rate limit exceeded for Google Safe Browsing API\n</code></pre> Solution: Wait and retry, or disable specific APIs in configuration</p>"},{"location":"user-guide/trust-scoring/#network-timeouts","title":"Network Timeouts","text":"<p><pre><code>Error: Request timeout after 30 seconds\n</code></pre> Solution: Increase timeout in configuration or check network connectivity</p>"},{"location":"user-guide/trust-scoring/#domain-resolution-issues","title":"Domain Resolution Issues","text":"<p><pre><code>Error: Failed to resolve domain\n</code></pre> Solution: Check DNS configuration and domain validity</p>"},{"location":"user-guide/trust-scoring/#debug-mode","title":"Debug Mode","text":"<p>Enable verbose output for debugging:</p> <pre><code>aihint scoring score https://example.com --verbose\n</code></pre>"},{"location":"user-guide/trust-scoring/#logging","title":"Logging","text":"<p>The system uses Python's logging module. Configure logging level:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"user-guide/trust-scoring/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/trust-scoring/#for-ai-systems","title":"For AI Systems","text":"<ol> <li>Cache Results: Store scoring results to avoid repeated analysis</li> <li>Set Thresholds: Define minimum trust scores for different use cases</li> <li>Monitor Changes: Re-score websites periodically as trust can change</li> <li>Combine Sources: Use multiple trust indicators for critical decisions</li> </ol>"},{"location":"user-guide/trust-scoring/#for-website-owners","title":"For Website Owners","text":"<ol> <li>Implement Security Headers: Use proper CSP, HSTS, and other security headers</li> <li>Maintain SSL Certificates: Ensure certificates are valid and properly configured</li> <li>Provide Contact Information: Make contact details easily accessible</li> <li>Create Privacy Policies: Implement clear, accessible privacy policies</li> </ol>"},{"location":"user-guide/trust-scoring/#for-developers","title":"For Developers","text":"<ol> <li>Handle Errors Gracefully: Implement proper error handling for scoring failures</li> <li>Use Configuration: Customize scoring weights based on your use case</li> <li>Monitor Performance: Track scoring performance and optimize as needed</li> <li>Update Regularly: Keep scoring modules updated with latest threat intelligence</li> </ol>"},{"location":"user-guide/trust-scoring/#see-also","title":"See Also","text":"<ul> <li>CLI Reference - Command-line interface details</li> <li>Python API - Python implementation details</li> <li>Security Considerations - Security best practices</li> <li>Trust Model - Trust model architecture</li> </ul>"}]}