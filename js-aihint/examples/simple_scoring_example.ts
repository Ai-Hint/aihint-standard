import { TrustScoringEngine } from '../src/scoring/TrustScoringEngine';
import { TrustLevelHelper } from '../src/scoring/TrustLevel';
import { signHint, verifyHint, validateHint, AiHint } from '../src/aihint';
import * as fs from 'fs';
import * as crypto from 'crypto';

async function main() {
  console.log('=== JavaScript/TypeScript AiHint Trust Scoring Integration ===\n');

  // Initialize the trust scoring engine
  const scoringEngine = new TrustScoringEngine();

  // URL to process
  const url = 'https://github.com';
  console.log(`Processing: ${url}`);
  console.log('-'.repeat(50));

  try {
    // Step 1: Get trust score
    console.log('Step 1: Calculating trust score...');
    const result = await scoringEngine.scoreWebsite(url);
    console.log(`✓ Trust score calculated: ${result.finalScore.toFixed(3)}`);
    console.log(`✓ Trust level: ${result.trustLevel} (${TrustLevelHelper.getDescription(result.trustLevel)})\n`);

    // Step 2: Create AiHint data structure
    console.log('Step 2: Creating AiHint data structure...');
    const aihintData: AiHint = {
      version: '0.1',
      type: 'global',
      target: url,
      issuer: 'https://trust.aihint.org',
      score: result.finalScore,
      method: 'aihint-scoring-v1', // Use scoring method
      issued_at: new Date().toISOString(),
      expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(), // 1 year
      comment: `Trust score: ${result.finalScore.toFixed(3)} (Level: ${result.trustLevel}) - Generated by TypeScript AiHint`,
      public_key_url: 'https://trust.aihint.org/pubkey.pem'
    };
    console.log('✓ AiHint object created');

    // Step 3: Validate AiHint
    console.log('Step 3: Validating AiHint...');
    const isValid = validateHint(aihintData);
    console.log(`✓ AiHint validation: ${isValid ? 'PASSED' : 'FAILED'}\n`);

    // Step 4: Generate keys and sign
    console.log('Step 4: Generating keys and signing...');
    const { privateKey, publicKey } = crypto.generateKeyPairSync('rsa', {
      modulusLength: 2048,
      publicKeyEncoding: { type: 'spki', format: 'pem' },
      privateKeyEncoding: { type: 'pkcs8', format: 'pem' },
    });

    // Save keys
    fs.writeFileSync('private_key.pem', privateKey);
    fs.writeFileSync('public_key.pem', publicKey);
    console.log('✓ Keys generated and saved');

    // Sign the AiHint
    const signedAiHint = signHint(aihintData, 'private_key.pem');
    console.log('✓ AiHint signed with private key\n');

    // Step 5: Verify the signature
    console.log('Step 5: Verifying signature...');
    const signatureValid = await verifyHint(signedAiHint, 'public_key.pem');
    console.log(`✓ Signature verification: ${signatureValid ? 'PASSED' : 'FAILED'}\n`);

    // Step 6: Save the signed AiHint
    console.log('Step 6: Saving signed AiHint...');
    const filename = `signed_aihint_${new URL(url).hostname}.json`;
    fs.writeFileSync(filename, JSON.stringify(signedAiHint, null, 2));
    console.log(`✓ Saved to: ${filename}\n`);

    // Step 7: Display the complete AiHint
    console.log('Step 7: Final AiHint JSON:');
    console.log('-'.repeat(50));
    console.log(JSON.stringify(signedAiHint, null, 2));
    console.log('-'.repeat(50) + '\n');

    // Display scoring details
    console.log('Scoring Details:');
    console.log(`  Final Score: ${result.finalScore.toFixed(3)}`);
    console.log(`  Trust Level: ${result.trustLevel} (${TrustLevelHelper.getDescription(result.trustLevel)})`);
    console.log(`  Security Score: ${result.securityScore.toFixed(3)}`);
    console.log(`  Reputation Score: ${result.reputationScore.toFixed(3)}`);
    console.log(`  Compliance Score: ${result.complianceScore.toFixed(3)}`);
    console.log(`  Confidence: ${result.confidence.toFixed(3)}`);

    if (result.warnings.length > 0) {
      console.log(`  Warnings: ${result.warnings.length}`);
    }

    if (result.errors.length > 0) {
      console.log(`  Errors: ${result.errors.length}`);
    }

  } catch (error) {
    console.log(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    if (error instanceof Error && error.stack) {
      console.log('Stack trace:');
      console.log(error.stack);
    }
  }

  console.log('\n=== Workflow Complete ===');
}

main().catch(console.error);
